{"ast":null,"code":"var _jsxFileName = \"/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateDealSet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateDealSet() {\n  _s();\n  const [example, setExample] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    const checkForExample = () => {\n      const storedExample = sessionStorage.getItem('generatedExample');\n      if (storedExample) {\n        setExample(JSON.parse(storedExample));\n      }\n    };\n    checkForExample();\n\n    // Event listener to clear sessionStorage when the page is fully reloaded\n    const handleBeforeUnload = e => {\n      sessionStorage.removeItem('generatedExample'); // Data is cleared on full page reload\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  const generateExample = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({/* compilerSettings object structure here */})\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setExample(data);\n      sessionStorage.setItem('generatedExample', JSON.stringify(data)); // Temporarily store the example\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateExample,\n      disabled: isLoading,\n      children: isLoading ? 'Generating...' : 'Generate'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), example ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: example.scriptRawOutput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Press 'Generate' to generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n_s(GenerateDealSet, \"z0o7zbqvtI8KI7ki2ega1uh57zw=\");\n_c = GenerateDealSet;\nexport default GenerateExample;\nvar _c;\n$RefreshReg$(_c, \"GenerateDealSet\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GenerateDealSet","_s","example","setExample","isLoading","setIsLoading","checkForExample","storedExample","sessionStorage","getItem","JSON","parse","handleBeforeUnload","e","removeItem","window","addEventListener","removeEventListener","generateExample","response","fetch","method","headers","body","stringify","ok","Error","data","json","setItem","error","console","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","scriptRawOutput","_c","GenerateExample","$RefreshReg$"],"sources":["/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateDealSet.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction GenerateDealSet() {\n    const [example, setExample] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        const checkForExample = () => {\n            const storedExample = sessionStorage.getItem('generatedExample');\n            if (storedExample) {\n                setExample(JSON.parse(storedExample));\n            }\n        };\n\n        checkForExample();\n\n        // Event listener to clear sessionStorage when the page is fully reloaded\n        const handleBeforeUnload = (e) => {\n            sessionStorage.removeItem('generatedExample'); // Data is cleared on full page reload\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, []);\n\n    const generateExample = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ /* compilerSettings object structure here */ }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const data = await response.json();\n            setExample(data);\n            sessionStorage.setItem('generatedExample', JSON.stringify(data)); // Temporarily store the example\n        } catch (error) {\n            console.error('Failed to fetch:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div>\n            <button onClick={generateExample} disabled={isLoading}>\n                {isLoading ? 'Generating...' : 'Generate'}\n            </button>\n            {example ? (\n                <pre>{example.scriptRawOutput}</pre>\n            ) : (\n                <p>Press 'Generate' to generate</p>\n            )}\n        </div>\n    );\n}\n\nexport default GenerateExample;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACZ,MAAMS,eAAe,GAAGA,CAAA,KAAM;MAC1B,MAAMC,aAAa,GAAGC,cAAc,CAACC,OAAO,CAAC,kBAAkB,CAAC;MAChE,IAAIF,aAAa,EAAE;QACfJ,UAAU,CAACO,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;MACzC;IACJ,CAAC;IAEDD,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMM,kBAAkB,GAAIC,CAAC,IAAK;MAC9BL,cAAc,CAACM,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACnD,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEJ,kBAAkB,CAAC;IAE3D,OAAO,MAAM;MACTG,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEL,kBAAkB,CAAC;IAClE,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChCb,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEb,IAAI,CAACc,SAAS,CAAC,CAAE,6CAA8C;MACzE,CAAC,CAAC;MAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCzB,UAAU,CAACwB,IAAI,CAAC;MAChBnB,cAAc,CAACqB,OAAO,CAAC,kBAAkB,EAAEnB,IAAI,CAACc,SAAS,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOG,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C,CAAC,SAAS;MACNzB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACIN,OAAA;IAAAiC,QAAA,gBACIjC,OAAA;MAAQkC,OAAO,EAAEf,eAAgB;MAACgB,QAAQ,EAAE9B,SAAU;MAAA4B,QAAA,EACjD5B,SAAS,GAAG,eAAe,GAAG;IAAU;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EACRpC,OAAO,gBACJH,OAAA;MAAAiC,QAAA,EAAM9B,OAAO,CAACqC;IAAe;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAEpCvC,OAAA;MAAAiC,QAAA,EAAG;IAA4B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACrC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACrC,EAAA,CA/DQD,eAAe;AAAAwC,EAAA,GAAfxC,eAAe;AAiExB,eAAeyC,eAAe;AAAC,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}