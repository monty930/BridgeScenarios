{"ast":null,"code":"var _jsxFileName = \"/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateExample.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateExample() {\n  _s();\n  const [example, setExample] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // useEffect(() => {\n  //     const checkForExample = () => {\n  //         const storedExample = sessionStorage.getItem('generatedExample');\n  //         if (storedExample) {\n  //             setExample(JSON.parse(storedExample));\n  //         }\n  //     };\n  //\n  //     checkForExample();\n  //\n  //     // Event listener to clear sessionStorage when the page is fully reloaded\n  //     const handleBeforeUnload = (e) => {\n  //         sessionStorage.removeItem('generatedExample'); // Data is cleared on full page reload\n  //     };\n  //\n  //     window.addEventListener('beforeunload', handleBeforeUnload);\n  //\n  //     return () => {\n  //         window.removeEventListener('beforeunload', handleBeforeUnload);\n  //     };\n  // }, []);\n\n  const generateExample = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({/* compilerSettings object structure here */})\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(data);\n      setExample(data.dealSets);\n      // sessionStorage.setItem('generatedExample', JSON.stringify(data)); // Temporarily store the example\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateExample,\n      disabled: isLoading,\n      children: isLoading ? 'Generating...' : 'Generate'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), example ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: example\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Press 'Generate' to generate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(GenerateExample, \"URlQ8fjmf0zR3NFmbUj1Aebzt7M=\");\n_c = GenerateExample;\nexport default GenerateExample;\nvar _c;\n$RefreshReg$(_c, \"GenerateExample\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GenerateExample","_s","example","setExample","isLoading","setIsLoading","generateExample","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","console","log","dealSets","error","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateExample.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction GenerateExample() {\n    const [example, setExample] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // useEffect(() => {\n    //     const checkForExample = () => {\n    //         const storedExample = sessionStorage.getItem('generatedExample');\n    //         if (storedExample) {\n    //             setExample(JSON.parse(storedExample));\n    //         }\n    //     };\n    //\n    //     checkForExample();\n    //\n    //     // Event listener to clear sessionStorage when the page is fully reloaded\n    //     const handleBeforeUnload = (e) => {\n    //         sessionStorage.removeItem('generatedExample'); // Data is cleared on full page reload\n    //     };\n    //\n    //     window.addEventListener('beforeunload', handleBeforeUnload);\n    //\n    //     return () => {\n    //         window.removeEventListener('beforeunload', handleBeforeUnload);\n    //     };\n    // }, []);\n\n    const generateExample = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ /* compilerSettings object structure here */ }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const data = await response.json();\n            console.log(data);\n            setExample(data.dealSets);\n            // sessionStorage.setItem('generatedExample', JSON.stringify(data)); // Temporarily store the example\n        } catch (error) {\n            console.error('Failed to fetch:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    return (\n        <div>\n            <button onClick={generateExample} disabled={isLoading}>\n                {isLoading ? 'Generating...' : 'Generate'}\n            </button>\n            {example ? (\n                <pre>{example}</pre>\n            ) : (\n                <p>Press 'Generate' to generate</p>\n            )}\n        </div>\n    );\n}\n\nexport default GenerateExample;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChCD,YAAY,CAAC,IAAI,CAAC;IAClB,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;QAC1EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,CAAE,6CAA8C;MACzE,CAAC,CAAC;MAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBb,UAAU,CAACa,IAAI,CAACI,QAAQ,CAAC;MACzB;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C,CAAC,SAAS;MACNhB,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC;EAED,oBACIN,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAQwB,OAAO,EAAEjB,eAAgB;MAACkB,QAAQ,EAAEpB,SAAU;MAAAkB,QAAA,EACjDlB,SAAS,GAAG,eAAe,GAAG;IAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC,EACR1B,OAAO,gBACJH,OAAA;MAAAuB,QAAA,EAAMpB;IAAO;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAEpB7B,OAAA;MAAAuB,QAAA,EAAG;IAA4B;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACrC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAAC3B,EAAA,CAhEQD,eAAe;AAAA6B,EAAA,GAAf7B,eAAe;AAkExB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}