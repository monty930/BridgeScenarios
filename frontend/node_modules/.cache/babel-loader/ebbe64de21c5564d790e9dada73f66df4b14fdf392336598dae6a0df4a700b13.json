{"ast":null,"code":"var _jsxFileName = \"/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/Common/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [authError, setAuthError] = useState(null); // New state for handling authentication errors\n\n  useEffect(() => {\n    const validateSession = async () => {\n      try {\n        const response = await fetch('http://localhost:5015/Account/ValidateSession', {\n          method: 'GET',\n          credentials: 'include'\n        });\n        if (response.status === 200) {\n          setIsAuthenticated(true);\n        } else {\n          setIsAuthenticated(false);\n        }\n      } catch (error) {\n        console.error('Session validation failed:', error);\n        setIsAuthenticated(false);\n        setAuthError('The web service is not available.\\nPlease try again later.');\n      }\n    };\n    validateSession();\n  }, []);\n  const login = () => {\n    setIsAuthenticated(true);\n    setAuthError(null);\n  };\n  const logout = () => {\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      authError,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"IgBrVi43C3b9SgyMlWX5tYKFVdg=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","authError","setAuthError","validateSession","response","fetch","method","credentials","status","error","console","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/Common/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const [authError, setAuthError] = useState(null);  // New state for handling authentication errors\n\n    useEffect(() => {\n        const validateSession = async () => {\n            try {\n                const response = await fetch('http://localhost:5015/Account/ValidateSession', {\n                    method: 'GET',\n                    credentials: 'include',\n                });\n                if (response.status === 200) {\n                    setIsAuthenticated(true);\n                } else {\n                    setIsAuthenticated(false);\n                }\n            } catch (error) {\n                console.error('Session validation failed:', error);\n                setIsAuthenticated(false);\n                setAuthError('The web service is not available.\\nPlease try again later.');\n            }\n        };\n\n        validateSession();\n    }, []);\n\n    const login = () => {\n        setIsAuthenticated(true);\n        setAuthError(null);\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n    };\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, authError, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;EAEnDC,SAAS,CAAC,MAAM;IACZ,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+CAA+C,EAAE;UAC1EC,MAAM,EAAE,KAAK;UACbC,WAAW,EAAE;QACjB,CAAC,CAAC;QACF,IAAIH,QAAQ,CAACI,MAAM,KAAK,GAAG,EAAE;UACzBR,kBAAkB,CAAC,IAAI,CAAC;QAC5B,CAAC,MAAM;UACHA,kBAAkB,CAAC,KAAK,CAAC;QAC7B;MACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDT,kBAAkB,CAAC,KAAK,CAAC;QACzBE,YAAY,CAAC,4DAA4D,CAAC;MAC9E;IACJ,CAAC;IAEDC,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAGA,CAAA,KAAM;IAChBX,kBAAkB,CAAC,IAAI,CAAC;IACxBE,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACjBZ,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACIN,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEf,eAAe;MAAEE,SAAS;MAAEU,KAAK;MAAEC;IAAO,CAAE;IAAAf,QAAA,EACtEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAACpB,EAAA,CAxCWF,YAAY;AAAAuB,EAAA,GAAZvB,YAAY;AA0CzB,OAAO,MAAMwB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM/B,UAAU,CAACK,WAAW,CAAC;AAAA;AAAC0B,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}