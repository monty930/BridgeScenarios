{"ast":null,"code":"var _jsxFileName = \"/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/Scenarios.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport MakeScenarios from './MakeScenarios';\nimport GenerateExample from './GenerateExample';\nimport GenerateDealSet from './GenerateDealSet';\nimport UseScenarios from './UseScenarios';\nimport '../../css/Scenarios.css';\nimport UseScenariosChoose from \"./UseScenariosChoose\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Scenarios() {\n  _s();\n  const [dealSettings, setDealSettings] = useState({\n    NumberOfDeals: 1,\n    Vul: 'None',\n    Scoring: 'None',\n    Flip: 'None',\n    Dealer: 'None'\n  });\n  const location = useLocation();\n  const pageLayoutRef = useRef(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [leftWidthRatio, setLeftWidthRatio] = useState(0.5);\n  let dividerWidth = 8;\n  console.log('dividerWidth:', dividerWidth);\n  const minWidth = 400;\n  useEffect(() => {\n    function updatePanelWidths() {\n      if (!pageLayoutRef.current) return;\n      console.log('updatePanelWidths');\n      const pageLayoutRect = pageLayoutRef.current.getBoundingClientRect();\n      const totalWidth = pageLayoutRect.width;\n      if (window.innerWidth <= 2 * minWidth + dividerWidth) {\n        pageLayoutRef.current.style.gridTemplateColumns = `1fr ${dividerWidth}px 1fr`;\n        return;\n      }\n      let leftWidth = totalWidth * leftWidthRatio - dividerWidth / 2;\n      let rightWidth = totalWidth - leftWidth - dividerWidth / 2;\n      if (leftWidth < minWidth) {\n        leftWidth = minWidth;\n        rightWidth = totalWidth - leftWidth - dividerWidth / 2;\n      } else if (rightWidth < minWidth) {\n        rightWidth = minWidth;\n        leftWidth = totalWidth - rightWidth - dividerWidth / 2;\n      }\n      console.log('leftWidth:', leftWidth);\n      pageLayoutRef.current.style.gridTemplateColumns = `${leftWidth}px ${dividerWidth}px ${rightWidth}px`;\n    }\n    function handleMouseMove(e) {\n      if (!isDragging || window.innerWidth <= 800) return;\n      console.log('handleMouseMove');\n      const pageLayoutRect = pageLayoutRef.current.getBoundingClientRect();\n      let newLeftWidth = e.clientX - pageLayoutRect.left - dividerWidth / 2;\n      let newRightWidth = pageLayoutRect.width - newLeftWidth - dividerWidth;\n      const totalWidth = pageLayoutRect.width;\n      let newLeftWidthRatio = newLeftWidth / totalWidth;\n      if (newLeftWidth >= minWidth && newRightWidth >= minWidth) {\n        setLeftWidthRatio(newLeftWidthRatio);\n      }\n    }\n    function handleMouseUp() {\n      setIsDragging(false);\n    }\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    window.addEventListener('resize', updatePanelWidths);\n    updatePanelWidths();\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('resize', updatePanelWidths);\n    };\n  }, [isDragging, leftWidthRatio]);\n  let content;\n  if (location.pathname === \"/scenarios/make\") {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ScenariosPage\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"MakeScenariosOuter\",\n        children: /*#__PURE__*/_jsxDEV(MakeScenarios, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Divider\",\n        onMouseDown: () => setIsDragging(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"GenerateExampleOuter\",\n        children: /*#__PURE__*/_jsxDEV(GenerateExample, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 55\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  } else if (location.pathname === \"/scenarios/use\") {\n    content = /*#__PURE__*/_jsxDEV(UseScenarios, {\n      setIsDragging: setIsDragging\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 19\n    }, this);\n  } else {\n    content = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"ERROR!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }, this);\n  }\n  return content;\n}\n_s(Scenarios, \"2KOdmT/48xoFofsYleIG7NATWYQ=\", false, function () {\n  return [useLocation];\n});\n_c = Scenarios;\nexport default Scenarios;\nvar _c;\n$RefreshReg$(_c, \"Scenarios\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","MakeScenarios","GenerateExample","GenerateDealSet","UseScenarios","UseScenariosChoose","jsxDEV","_jsxDEV","Scenarios","_s","dealSettings","setDealSettings","NumberOfDeals","Vul","Scoring","Flip","Dealer","location","pageLayoutRef","isDragging","setIsDragging","leftWidthRatio","setLeftWidthRatio","dividerWidth","console","log","minWidth","updatePanelWidths","current","pageLayoutRect","getBoundingClientRect","totalWidth","width","window","innerWidth","style","gridTemplateColumns","leftWidth","rightWidth","handleMouseMove","e","newLeftWidth","clientX","left","newRightWidth","newLeftWidthRatio","handleMouseUp","document","addEventListener","removeEventListener","content","pathname","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onMouseDown","_c","$RefreshReg$"],"sources":["/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/Scenarios.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport MakeScenarios from './MakeScenarios';\nimport GenerateExample from './GenerateExample';\nimport GenerateDealSet from './GenerateDealSet';\nimport UseScenarios from './UseScenarios';\nimport '../../css/Scenarios.css';\nimport UseScenariosChoose from \"./UseScenariosChoose\";\n\nfunction Scenarios() {\n    const [dealSettings, setDealSettings] = useState({\n        NumberOfDeals: 1,\n        Vul: 'None',\n        Scoring: 'None',\n        Flip: 'None',\n        Dealer: 'None',\n    });\n    \n    const location = useLocation();\n    const pageLayoutRef = useRef(null);\n    const [isDragging, setIsDragging] = useState(false);\n    const [leftWidthRatio, setLeftWidthRatio] = useState(0.5);\n    let dividerWidth = 8;\n    console.log('dividerWidth:', dividerWidth);\n    \n    const minWidth = 400;\n\n    useEffect(() => {\n        function updatePanelWidths() {\n            if (!pageLayoutRef.current) return;\n\n            console.log('updatePanelWidths');\n\n            const pageLayoutRect = pageLayoutRef.current.getBoundingClientRect();\n            const totalWidth = pageLayoutRect.width;\n\n            if (window.innerWidth <= 2 * minWidth + dividerWidth) {\n                pageLayoutRef.current.style.gridTemplateColumns = `1fr ${dividerWidth}px 1fr`;\n                return;\n            }\n\n            let leftWidth = totalWidth * leftWidthRatio - dividerWidth / 2;\n            let rightWidth = totalWidth - leftWidth - dividerWidth / 2;\n\n            if (leftWidth < minWidth) {\n                leftWidth = minWidth;\n                rightWidth = totalWidth - leftWidth - dividerWidth / 2;\n            } else if (rightWidth < minWidth) {\n                rightWidth = minWidth;\n                leftWidth = totalWidth - rightWidth - dividerWidth / 2;\n            }\n\n            console.log('leftWidth:', leftWidth);\n\n            pageLayoutRef.current.style.gridTemplateColumns = `${leftWidth}px ${dividerWidth}px ${rightWidth}px`;\n        }\n\n        function handleMouseMove(e) {\n            if (!isDragging || window.innerWidth <= 800) return;\n\n            console.log('handleMouseMove');\n\n            const pageLayoutRect = pageLayoutRef.current.getBoundingClientRect();\n            let newLeftWidth = e.clientX - pageLayoutRect.left - dividerWidth / 2;\n            let newRightWidth = pageLayoutRect.width - newLeftWidth - dividerWidth;\n\n            const totalWidth = pageLayoutRect.width;\n            let newLeftWidthRatio = newLeftWidth / totalWidth;\n\n            if (newLeftWidth >= minWidth && newRightWidth >= minWidth) {\n                setLeftWidthRatio(newLeftWidthRatio);\n            }\n        }\n\n        function handleMouseUp() {\n            setIsDragging(false);\n        }\n\n        document.addEventListener('mousemove', handleMouseMove);\n        document.addEventListener('mouseup', handleMouseUp);\n        window.addEventListener('resize', updatePanelWidths);\n\n        updatePanelWidths();\n\n        return () => {\n            document.removeEventListener('mousemove', handleMouseMove);\n            document.removeEventListener('mouseup', handleMouseUp);\n            window.removeEventListener('resize', updatePanelWidths);\n        };\n    }, [isDragging, leftWidthRatio]);\n\n    let content;\n    if (location.pathname === \"/scenarios/make\") {\n        content = (\n            <div className=\"ScenariosPage\">\n                <div className=\"MakeScenariosOuter\"><MakeScenarios /></div>\n                <div className=\"Divider\" onMouseDown={() => setIsDragging(true)}></div>\n                <div className=\"GenerateExampleOuter\"><GenerateExample /></div>\n            </div>\n        );\n    } else if (location.pathname === \"/scenarios/use\") {\n        content = <UseScenarios setIsDragging={setIsDragging} />;\n    } else {\n        content = <div>ERROR!</div>\n    }\n\n    return content;\n}\n\nexport default Scenarios;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAO,yBAAyB;AAChC,OAAOC,kBAAkB,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC;IAC7Ce,aAAa,EAAE,CAAC;IAChBC,GAAG,EAAE,MAAM;IACXC,OAAO,EAAE,MAAM;IACfC,IAAI,EAAE,MAAM;IACZC,MAAM,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAMkB,aAAa,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAClC,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwB,cAAc,EAAEC,iBAAiB,CAAC,GAAGzB,QAAQ,CAAC,GAAG,CAAC;EACzD,IAAI0B,YAAY,GAAG,CAAC;EACpBC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,YAAY,CAAC;EAE1C,MAAMG,QAAQ,GAAG,GAAG;EAEpB5B,SAAS,CAAC,MAAM;IACZ,SAAS6B,iBAAiBA,CAAA,EAAG;MACzB,IAAI,CAACT,aAAa,CAACU,OAAO,EAAE;MAE5BJ,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAEhC,MAAMI,cAAc,GAAGX,aAAa,CAACU,OAAO,CAACE,qBAAqB,CAAC,CAAC;MACpE,MAAMC,UAAU,GAAGF,cAAc,CAACG,KAAK;MAEvC,IAAIC,MAAM,CAACC,UAAU,IAAI,CAAC,GAAGR,QAAQ,GAAGH,YAAY,EAAE;QAClDL,aAAa,CAACU,OAAO,CAACO,KAAK,CAACC,mBAAmB,GAAI,OAAMb,YAAa,QAAO;QAC7E;MACJ;MAEA,IAAIc,SAAS,GAAGN,UAAU,GAAGV,cAAc,GAAGE,YAAY,GAAG,CAAC;MAC9D,IAAIe,UAAU,GAAGP,UAAU,GAAGM,SAAS,GAAGd,YAAY,GAAG,CAAC;MAE1D,IAAIc,SAAS,GAAGX,QAAQ,EAAE;QACtBW,SAAS,GAAGX,QAAQ;QACpBY,UAAU,GAAGP,UAAU,GAAGM,SAAS,GAAGd,YAAY,GAAG,CAAC;MAC1D,CAAC,MAAM,IAAIe,UAAU,GAAGZ,QAAQ,EAAE;QAC9BY,UAAU,GAAGZ,QAAQ;QACrBW,SAAS,GAAGN,UAAU,GAAGO,UAAU,GAAGf,YAAY,GAAG,CAAC;MAC1D;MAEAC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEY,SAAS,CAAC;MAEpCnB,aAAa,CAACU,OAAO,CAACO,KAAK,CAACC,mBAAmB,GAAI,GAAEC,SAAU,MAAKd,YAAa,MAAKe,UAAW,IAAG;IACxG;IAEA,SAASC,eAAeA,CAACC,CAAC,EAAE;MACxB,IAAI,CAACrB,UAAU,IAAIc,MAAM,CAACC,UAAU,IAAI,GAAG,EAAE;MAE7CV,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAE9B,MAAMI,cAAc,GAAGX,aAAa,CAACU,OAAO,CAACE,qBAAqB,CAAC,CAAC;MACpE,IAAIW,YAAY,GAAGD,CAAC,CAACE,OAAO,GAAGb,cAAc,CAACc,IAAI,GAAGpB,YAAY,GAAG,CAAC;MACrE,IAAIqB,aAAa,GAAGf,cAAc,CAACG,KAAK,GAAGS,YAAY,GAAGlB,YAAY;MAEtE,MAAMQ,UAAU,GAAGF,cAAc,CAACG,KAAK;MACvC,IAAIa,iBAAiB,GAAGJ,YAAY,GAAGV,UAAU;MAEjD,IAAIU,YAAY,IAAIf,QAAQ,IAAIkB,aAAa,IAAIlB,QAAQ,EAAE;QACvDJ,iBAAiB,CAACuB,iBAAiB,CAAC;MACxC;IACJ;IAEA,SAASC,aAAaA,CAAA,EAAG;MACrB1B,aAAa,CAAC,KAAK,CAAC;IACxB;IAEA2B,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAET,eAAe,CAAC;IACvDQ,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEF,aAAa,CAAC;IACnDb,MAAM,CAACe,gBAAgB,CAAC,QAAQ,EAAErB,iBAAiB,CAAC;IAEpDA,iBAAiB,CAAC,CAAC;IAEnB,OAAO,MAAM;MACToB,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEV,eAAe,CAAC;MAC1DQ,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEH,aAAa,CAAC;MACtDb,MAAM,CAACgB,mBAAmB,CAAC,QAAQ,EAAEtB,iBAAiB,CAAC;IAC3D,CAAC;EACL,CAAC,EAAE,CAACR,UAAU,EAAEE,cAAc,CAAC,CAAC;EAEhC,IAAI6B,OAAO;EACX,IAAIjC,QAAQ,CAACkC,QAAQ,KAAK,iBAAiB,EAAE;IACzCD,OAAO,gBACH3C,OAAA;MAAK6C,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1B9C,OAAA;QAAK6C,SAAS,EAAC,oBAAoB;QAAAC,QAAA,eAAC9C,OAAA,CAACN,aAAa;UAAAqD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC3DlD,OAAA;QAAK6C,SAAS,EAAC,SAAS;QAACM,WAAW,EAAEA,CAAA,KAAMtC,aAAa,CAAC,IAAI;MAAE;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvElD,OAAA;QAAK6C,SAAS,EAAC,sBAAsB;QAAAC,QAAA,eAAC9C,OAAA,CAACL,eAAe;UAAAoD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CACR;EACL,CAAC,MAAM,IAAIxC,QAAQ,CAACkC,QAAQ,KAAK,gBAAgB,EAAE;IAC/CD,OAAO,gBAAG3C,OAAA,CAACH,YAAY;MAACgB,aAAa,EAAEA;IAAc;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5D,CAAC,MAAM;IACHP,OAAO,gBAAG3C,OAAA;MAAA8C,QAAA,EAAK;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/B;EAEA,OAAOP,OAAO;AAClB;AAACzC,EAAA,CAlGQD,SAAS;EAAA,QASGR,WAAW;AAAA;AAAA2D,EAAA,GATvBnD,SAAS;AAoGlB,eAAeA,SAAS;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}