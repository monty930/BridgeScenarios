{"ast":null,"code":"var _jsxFileName = \"/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateDealSet.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useScenario } from './CompilerSettings';\nimport { addDealToDsi, removeDealFromDsi, replaceOneDeal } from \"./DealHelper\";\nimport SaveDialog from \"./SaveDialogWindow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenerateDealSet() {\n  _s();\n  const [dealSet, setDealSet] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentDealNo, setCurrentDealNo] = useState(parseInt(sessionStorage.getItem('currentDealNo') || '0'));\n  const {\n    vul,\n    dealer,\n    numberOfDeals\n  } = useScenario();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const fetchDealSetDetails = async dealSetId => {\n    try {\n      const response = await fetch(`http://localhost:5015/Scenarios/GetDealSetDetails?dealSetId=${dealSetId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n    }\n  };\n  useEffect(() => {\n    // Check for deal set got from the saved data\n    const checkForSaved = async () => {\n      const savedDealSetId = sessionStorage.getItem('savedDealSetId');\n      if (savedDealSetId) {\n        let response = await fetchDealSetDetails(savedDealSetId);\n        console.log('response: ', response);\n        setDealSet(response.dealSet);\n        sessionStorage.removeItem('savedDealSetId');\n      }\n    };\n    checkForSaved();\n    const storedDealSet = sessionStorage.getItem('generatedDealSet');\n    if (storedDealSet) {\n      setDealSet(JSON.parse(storedDealSet));\n    }\n\n    // Event listener to clear sessionStorage when the page is fully reloaded\n    const handleBeforeUnload = () => {\n      sessionStorage.removeItem('generatedDealSet');\n    };\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  useEffect(() => {\n    // Sync the currentDealNo with sessionStorage whenever it changes\n    sessionStorage.setItem('currentDealNo', currentDealNo.toString());\n  }, [currentDealNo]);\n  const generateDealSet = async () => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          vul,\n          dealer,\n          numberOfDeals\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setDealSet(data);\n      sessionStorage.setItem('generatedDealSet', JSON.stringify(data));\n      sessionStorage.setItem('NumOfDeals', numberOfDeals.toString());\n      setCurrentDealNo(0); // Reset current deal number on new generation\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const nextDeal = () => {\n    console.log('nextDeal');\n    setCurrentDealNo(prev => Math.min(prev + 1, parseInt(sessionStorage.getItem('NumOfDeals') || '0')));\n  };\n  const previousDeal = () => {\n    setCurrentDealNo(prev => Math.max(prev - 1, 0));\n  };\n  const getOneNewDeal = async () => {\n    setIsLoading(true);\n    console.log('getOneNewDeal');\n    try {\n      const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          vul,\n          dealer,\n          numberOfDeals: 1\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      let responseJson = await response.json();\n      console.log('responseJson', responseJson);\n      return await responseJson;\n    } catch (error) {\n      console.error('Failed to fetch:', error);\n      setIsLoading(false);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const regenerate = dealNo => async () => {\n    let newDeal = await getOneNewDeal();\n    let currentDealSet = dealSet.scriptRawOutput;\n    setDealSet({\n      scriptRawOutput: replaceOneDeal(currentDealSet, newDeal.scriptRawOutput, dealNo)\n    });\n  };\n  const removeDeal = dealNum => () => {\n    let currentDealSet = dealSet.scriptRawOutput;\n    let newDealSet = removeDealFromDsi(currentDealSet, dealNum);\n    setDealSet({\n      scriptRawOutput: newDealSet\n    });\n    let numOfDeals = parseInt(sessionStorage.getItem('NumOfDeals') || '0') - 1;\n    sessionStorage.setItem('NumOfDeals', numOfDeals.toString());\n    if (numOfDeals === 0) {\n      setDealSet(null);\n    } else if (dealNum === numOfDeals + 1) {\n      setCurrentDealNo(dealNum - 1);\n    }\n  };\n  const addDeal = () => async () => {\n    console.log('addDeal1');\n    let newDeal = await getOneNewDeal();\n    console.log('addDeal2');\n    console.log('addDeal new: ', newDeal);\n    let currentDealSet = dealSet.scriptRawOutput;\n    let newDealSet = addDealToDsi(currentDealSet, newDeal.scriptRawOutput);\n    setDealSet({\n      scriptRawOutput: newDealSet\n    });\n    let numOfDeals = parseInt(sessionStorage.getItem('NumOfDeals') || '0') + 1;\n    sessionStorage.setItem('NumOfDeals', numOfDeals.toString());\n    console.log('addDeal3 ', newDealSet);\n    setCurrentDealNo(numOfDeals);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateDealSet,\n      disabled: isLoading,\n      children: isLoading ? 'Generating...' : 'Generate'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [dealSet && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setDealSet(null),\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsDialogOpen(true),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 25\n        }, this), currentDealNo >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: regenerate(currentDealNo),\n          children: \"Regenerate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 48\n        }, this), currentDealNo > 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: previousDeal,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 47\n        }, this), currentDealNo < parseInt(sessionStorage.getItem('NumOfDeals') || '0') ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextDeal,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 31\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addDeal(),\n          children: \"AddDeal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 31\n        }, this), currentDealNo >= 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: removeDeal(currentDealNo),\n          children: \"RemoveDeal\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 48\n        }, this), \"Deal num: \", currentDealNo, /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            overflow: 'auto',\n            height: '400px'\n          },\n          children: dealSet.scriptRawOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(SaveDialog, {\n          isOpen: isDialogOpen,\n          onClose: () => setIsDialogOpen(false),\n          dsiString: dealSet.scriptRawOutput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 21\n      }, this), !dealSet && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Press 'Generate' to generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n}\n_s(GenerateDealSet, \"xZsktqmtFcWbJdDhUiT7M0aVZeE=\", false, function () {\n  return [useScenario];\n});\n_c = GenerateDealSet;\nexport default GenerateDealSet;\nvar _c;\n$RefreshReg$(_c, \"GenerateDealSet\");","map":{"version":3,"names":["React","useEffect","useState","useScenario","addDealToDsi","removeDealFromDsi","replaceOneDeal","SaveDialog","jsxDEV","_jsxDEV","GenerateDealSet","_s","dealSet","setDealSet","isLoading","setIsLoading","currentDealNo","setCurrentDealNo","parseInt","sessionStorage","getItem","vul","dealer","numberOfDeals","isDialogOpen","setIsDialogOpen","fetchDealSetDetails","dealSetId","response","fetch","ok","Error","json","error","console","checkForSaved","savedDealSetId","log","removeItem","storedDealSet","JSON","parse","handleBeforeUnload","window","addEventListener","removeEventListener","setItem","toString","generateDealSet","method","headers","body","stringify","data","nextDeal","prev","Math","min","previousDeal","max","getOneNewDeal","responseJson","regenerate","dealNo","newDeal","currentDealSet","scriptRawOutput","removeDeal","dealNum","newDealSet","numOfDeals","addDeal","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","style","overflow","height","isOpen","onClose","dsiString","_c","$RefreshReg$"],"sources":["/home/monty/Home/Studia/mosty/WebApp/BridgeScenarios/frontend/src/js/scenarios/GenerateDealSet.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useScenario} from './CompilerSettings';\nimport {addDealToDsi, removeDealFromDsi, replaceOneDeal} from \"./DealHelper\";\nimport SaveDialog from \"./SaveDialogWindow\";\n\nfunction GenerateDealSet() {\n    const [dealSet, setDealSet] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [currentDealNo, setCurrentDealNo] = useState(parseInt(sessionStorage.getItem('currentDealNo') || '0'));\n    const { vul, dealer, numberOfDeals } = useScenario();\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n    const fetchDealSetDetails = async (dealSetId) => {\n        try {\n            const response = await fetch(`http://localhost:5015/Scenarios/GetDealSetDetails?dealSetId=${dealSetId}`);\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            return await response.json();\n        } catch (error) {\n            console.error('Failed to fetch:', error);\n        }\n    }\n    \n    useEffect(() => {\n        // Check for deal set got from the saved data\n        const checkForSaved = async () => {\n            const savedDealSetId = sessionStorage.getItem('savedDealSetId');\n            if (savedDealSetId) {\n                let response = await fetchDealSetDetails(savedDealSetId);\n                console.log('response: ', response);\n                setDealSet(response.dealSet);\n                sessionStorage.removeItem('savedDealSetId');\n            }\n        }\n        checkForSaved();\n        \n        const storedDealSet = sessionStorage.getItem('generatedDealSet');\n        if (storedDealSet) {\n            setDealSet(JSON.parse(storedDealSet));\n        }\n\n        // Event listener to clear sessionStorage when the page is fully reloaded\n        const handleBeforeUnload = () => {\n            sessionStorage.removeItem('generatedDealSet');\n        };\n\n        window.addEventListener('beforeunload', handleBeforeUnload);\n\n        return () => {\n            window.removeEventListener('beforeunload', handleBeforeUnload);\n        };\n    }, []);\n\n    useEffect(() => {\n        // Sync the currentDealNo with sessionStorage whenever it changes\n        sessionStorage.setItem('currentDealNo', currentDealNo.toString());\n    }, [currentDealNo]);\n\n    const generateDealSet = async () => {\n        setIsLoading(true);\n        try {\n            const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ vul, dealer, numberOfDeals }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n\n            const data = await response.json();\n            setDealSet(data);\n            sessionStorage.setItem('generatedDealSet', JSON.stringify(data));\n            sessionStorage.setItem('NumOfDeals', numberOfDeals.toString());\n            setCurrentDealNo(0); // Reset current deal number on new generation\n        } catch (error) {\n            console.error('Failed to fetch:', error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const nextDeal = () => {\n        console.log('nextDeal');\n        setCurrentDealNo((prev) => Math.min(prev + 1, parseInt(sessionStorage.getItem('NumOfDeals') || '0')));\n    };\n\n    const previousDeal = () => {\n        setCurrentDealNo((prev) => Math.max(prev - 1, 0));\n    };\n    \n    const getOneNewDeal = async () => {\n        setIsLoading(true);\n        console.log('getOneNewDeal');\n        try {\n            const response = await fetch('http://localhost:5015/Scenarios/GenerateDeals', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ vul, dealer, numberOfDeals: 1 }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Network response was not ok');\n            }\n            \n            let responseJson = await response.json();\n            console.log('responseJson', responseJson);\n            return await responseJson;\n        } catch (error) {\n            console.error('Failed to fetch:', error);\n            setIsLoading(false);\n        } finally {\n            setIsLoading(false);\n        }\n    }\n    \n    const regenerate = (dealNo) => async () => {\n        let newDeal = await getOneNewDeal();\n        let currentDealSet = dealSet.scriptRawOutput;\n        setDealSet({ scriptRawOutput: replaceOneDeal(currentDealSet, newDeal.scriptRawOutput, dealNo) });\n    }\n\n    const removeDeal = (dealNum) => () => {\n        let currentDealSet = dealSet.scriptRawOutput;\n        let newDealSet = removeDealFromDsi(currentDealSet, dealNum);\n        setDealSet({ scriptRawOutput: newDealSet });\n        let numOfDeals = parseInt(sessionStorage.getItem('NumOfDeals') || '0') - 1;\n        sessionStorage.setItem('NumOfDeals', (numOfDeals).toString());\n        if (numOfDeals === 0) {\n            setDealSet(null);\n        } else if (dealNum === numOfDeals + 1) {\n            setCurrentDealNo(dealNum - 1);\n        }\n    }\n    \n    const addDeal = () => async () => {\n        console.log('addDeal1');\n        let newDeal = await getOneNewDeal();\n        console.log('addDeal2');\n        console.log('addDeal new: ', newDeal);\n        let currentDealSet = dealSet.scriptRawOutput;\n        let newDealSet = addDealToDsi(currentDealSet, newDeal.scriptRawOutput);\n        setDealSet({ scriptRawOutput: newDealSet });\n        let numOfDeals = parseInt(sessionStorage.getItem('NumOfDeals') || '0') + 1;\n        sessionStorage.setItem('NumOfDeals', (numOfDeals).toString());\n        console.log('addDeal3 ', newDealSet);\n        setCurrentDealNo(numOfDeals);\n    }\n\n    return (\n        <div>\n            <button onClick={generateDealSet} disabled={isLoading}>\n                {isLoading ? 'Generating...' : 'Generate'}\n            </button>\n            <div>\n                {dealSet && (\n                    <div>\n                        <button onClick={() => setDealSet(null)}>Clear</button>\n                        <button onClick={() => setIsDialogOpen(true)}>Save</button>\n                        {currentDealNo >= 1 && <button onClick={regenerate(currentDealNo)}>Regenerate</button>}\n                        {currentDealNo > 1 && <button onClick={previousDeal}>Previous</button>}\n                        {currentDealNo < parseInt(sessionStorage.getItem('NumOfDeals') || '0')\n                            ? <button onClick={nextDeal}>Next</button>\n                            : <button onClick={addDeal()}>AddDeal</button>}\n                        {currentDealNo >= 1 && <button onClick={removeDeal(currentDealNo)}>RemoveDeal</button>}\n                        Deal num: {currentDealNo}\n                        <pre style={{ overflow: 'auto', height: '400px' }}>{dealSet.scriptRawOutput}</pre>\n                        <SaveDialog isOpen={isDialogOpen} onClose={() => setIsDialogOpen(false)} dsiString={dealSet.scriptRawOutput} />\n                    </div>\n                )}\n                {!dealSet && <p>Press 'Generate' to generate</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default GenerateDealSet;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}