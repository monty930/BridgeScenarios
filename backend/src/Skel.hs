-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transProg :: Abs.Prog -> Result
transProg x = case x of
  Abs.Program expr -> failure x

transType :: Abs.Type -> Result
transType x = case x of
  Abs.Int -> failure x

transExpr :: Abs.Expr -> Result
transExpr x = case x of
  Abs.EVar hand attr -> failure x
  Abs.ELitInt integer -> failure x
  Abs.ELitTrue -> failure x
  Abs.ELitFalse -> failure x
  Abs.Not expr -> failure x
  Abs.ERel expr1 relop expr2 -> failure x
  Abs.EAnd expr1 expr2 -> failure x
  Abs.EOr expr1 expr2 -> failure x

transHand :: Abs.Hand -> Result
transHand x = case x of
  Abs.HandN -> failure x
  Abs.HandE -> failure x
  Abs.HandW -> failure x
  Abs.HandS -> failure x

transLenAttr :: Abs.LenAttr -> Result
transLenAttr x = case x of
  Abs.AttrSpades -> failure x
  Abs.AttrHearts -> failure x
  Abs.AttrDiams -> failure x
  Abs.AttrClubs -> failure x

transSimpAttr :: Abs.SimpAttr -> Result
transSimpAttr x = case x of
  Abs.AttrHcp -> failure x

transAttr :: Abs.Attr -> Result
transAttr x = case x of
  Abs.LenAttr lenattr -> failure x
  Abs.SimpAttr simpattr -> failure x

transRelOp :: Abs.RelOp -> Result
transRelOp x = case x of
  Abs.LTH -> failure x
  Abs.LE -> failure x
  Abs.GTH -> failure x
  Abs.GE -> failure x
  Abs.EQU -> failure x
  Abs.NE -> failure x
