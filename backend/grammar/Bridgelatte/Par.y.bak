-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Bridgelatte.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Bridgelatte.Abs
import Bridgelatte.Lex

}

%name pProg Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'         { PT _ (TS _ 1)  }
  '!='        { PT _ (TS _ 2)  }
  '('         { PT _ (TS _ 3)  }
  ')'         { PT _ (TS _ 4)  }
  '+'         { PT _ (TS _ 5)  }
  ','         { PT _ (TS _ 6)  }
  '.'         { PT _ (TS _ 7)  }
  ';'         { PT _ (TS _ 8)  }
  '<'         { PT _ (TS _ 9)  }
  '<='        { PT _ (TS _ 10) }
  '='         { PT _ (TS _ 11) }
  '=='        { PT _ (TS _ 12) }
  '>'         { PT _ (TS _ 13) }
  '>='        { PT _ (TS _ 14) }
  'E'         { PT _ (TS _ 15) }
  'Evaluator' { PT _ (TS _ 16) }
  'N'         { PT _ (TS _ 17) }
  'S'         { PT _ (TS _ 18) }
  'W'         { PT _ (TS _ 19) }
  '['         { PT _ (TS _ 20) }
  ']'         { PT _ (TS _ 21) }
  'and'       { PT _ (TS _ 22) }
  'clubs'     { PT _ (TS _ 23) }
  'diams'     { PT _ (TS _ 24) }
  'false'     { PT _ (TS _ 25) }
  'freakness' { PT _ (TS _ 26) }
  'hcp'       { PT _ (TS _ 27) }
  'hearts'    { PT _ (TS _ 28) }
  'int'       { PT _ (TS _ 29) }
  'losers'    { PT _ (TS _ 30) }
  'not'       { PT _ (TS _ 31) }
  'or'        { PT _ (TS _ 32) }
  'spades'    { PT _ (TS _ 33) }
  'true'      { PT _ (TS _ 34) }
  L_Ident     { PT _ (TV $$)   }
  L_integ     { PT _ (TI $$)   }

%%

Ident :: { Bridgelatte.Abs.Ident }
Ident  : L_Ident { Bridgelatte.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Prog :: { Bridgelatte.Abs.Prog }
Prog
  : ListDef { Bridgelatte.Abs.EmptyProg $1 }
  | ListDef Expr { Bridgelatte.Abs.Program $1 $2 }

Def :: { Bridgelatte.Abs.Def }
Def
  : ShapeDef { Bridgelatte.Abs.TopDefShape $1 }
  | EvalDef { Bridgelatte.Abs.TopDefEval $1 }

ListDef :: { [Bridgelatte.Abs.Def] }
ListDef
  : {- empty -} { [] }
  | Def { (:[]) $1 }
  | Def ';' ListDef { (:) $1 $3 }

Type :: { Bridgelatte.Abs.Type }
Type : 'int' { Bridgelatte.Abs.Int }

ShapeDef :: { Bridgelatte.Abs.ShapeDef }
ShapeDef : Ident '=' ListShape { Bridgelatte.Abs.ShapeDef $1 $3 }

EvalDef :: { Bridgelatte.Abs.EvalDef }
EvalDef
  : Ident '=' 'Evaluator' '(' ListEvalVal ')' { Bridgelatte.Abs.EvalDef $1 $5 }

EvalVal :: { Bridgelatte.Abs.EvalVal }
EvalVal : Integer { Bridgelatte.Abs.EvalVal $1 }

ListEvalVal :: { [Bridgelatte.Abs.EvalVal] }
ListEvalVal
  : {- empty -} { [] }
  | EvalVal { (:[]) $1 }
  | EvalVal ',' ListEvalVal { (:) $1 $3 }

Shape :: { Bridgelatte.Abs.Shape }
Shape
  : ShapeOk { Bridgelatte.Abs.ShapeOk $1 }
  | ShapeNeg { Bridgelatte.Abs.ShapeNeg $1 }

ShapeOk :: { Bridgelatte.Abs.ShapeOk }
ShapeOk : '[' ListSuitCount ']' { Bridgelatte.Abs.OneShapeOk $2 }

ShapeNeg :: { Bridgelatte.Abs.ShapeNeg }
ShapeNeg : '!' ShapeOk { Bridgelatte.Abs.OneShapeNeg $2 }

ListShape :: { [Bridgelatte.Abs.Shape] }
ListShape
  : {- empty -} { [] }
  | Shape { (:[]) $1 }
  | Shape '+' ListShape { (:) $1 $3 }

SuitCount :: { Bridgelatte.Abs.SuitCount }
SuitCount
  : SuitInt { Bridgelatte.Abs.SuitIntCount $1 }
  | '(' ListSuitInt ')' { Bridgelatte.Abs.SuitChoice $2 }

SuitInt :: { Bridgelatte.Abs.SuitInt }
SuitInt : Integer { Bridgelatte.Abs.SuitInt $1 }

ListSuitCount :: { [Bridgelatte.Abs.SuitCount] }
ListSuitCount
  : {- empty -} { [] }
  | SuitCount { (:[]) $1 }
  | SuitCount ';' ListSuitCount { (:) $1 $3 }

ListSuitInt :: { [Bridgelatte.Abs.SuitInt] }
ListSuitInt
  : {- empty -} { [] }
  | SuitInt { (:[]) $1 }
  | SuitInt ';' ListSuitInt { (:) $1 $3 }

Expr6 :: { Bridgelatte.Abs.Expr }
Expr6
  : Hand '.' Attr { Bridgelatte.Abs.HandAttr $1 $3 }
  | Integer { Bridgelatte.Abs.ELitInt $1 }
  | 'true' { Bridgelatte.Abs.ELitTrue }
  | 'false' { Bridgelatte.Abs.ELitFalse }
  | '(' Expr ')' { $2 }

Expr5 :: { Bridgelatte.Abs.Expr }
Expr5 : 'not' Expr6 { Bridgelatte.Abs.Not $2 } | Expr6 { $1 }

Expr2 :: { Bridgelatte.Abs.Expr }
Expr2
  : Expr2 RelOp Expr3 { Bridgelatte.Abs.ERel $1 $2 $3 }
  | Expr3 { $1 }

Expr1 :: { Bridgelatte.Abs.Expr }
Expr1
  : Expr2 'and' Expr1 { Bridgelatte.Abs.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { Bridgelatte.Abs.Expr }
Expr : Expr1 'or' Expr { Bridgelatte.Abs.EOr $1 $3 } | Expr1 { $1 }

Expr3 :: { Bridgelatte.Abs.Expr }
Expr3 : Expr4 { $1 }

Expr4 :: { Bridgelatte.Abs.Expr }
Expr4 : Expr5 { $1 }

Hand :: { Bridgelatte.Abs.Hand }
Hand
  : 'N' { Bridgelatte.Abs.HandN }
  | 'E' { Bridgelatte.Abs.HandE }
  | 'W' { Bridgelatte.Abs.HandW }
  | 'S' { Bridgelatte.Abs.HandS }

LenAttr :: { Bridgelatte.Abs.LenAttr }
LenAttr
  : 'spades' { Bridgelatte.Abs.AttrSpades }
  | 'hearts' { Bridgelatte.Abs.AttrHearts }
  | 'diams' { Bridgelatte.Abs.AttrDiams }
  | 'clubs' { Bridgelatte.Abs.AttrClubs }

SimpAttr :: { Bridgelatte.Abs.SimpAttr }
SimpAttr
  : 'hcp' { Bridgelatte.Abs.AttrHcp }
  | 'freakness' { Bridgelatte.Abs.AttrFreak }
  | 'losers' { Bridgelatte.Abs.AttrLoser }

Attr :: { Bridgelatte.Abs.Attr }
Attr
  : Ident { Bridgelatte.Abs.AttrVar $1 }
  | LenAttr { Bridgelatte.Abs.LenAttr $1 }
  | SimpAttr { Bridgelatte.Abs.SimpAttr $1 }

RelOp :: { Bridgelatte.Abs.RelOp }
RelOp
  : '<' { Bridgelatte.Abs.LTH }
  | '<=' { Bridgelatte.Abs.LE }
  | '>' { Bridgelatte.Abs.GTH }
  | '>=' { Bridgelatte.Abs.GE }
  | '==' { Bridgelatte.Abs.EQU }
  | '!=' { Bridgelatte.Abs.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

