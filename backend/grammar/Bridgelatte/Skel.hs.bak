-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Bridgelatte.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Bridgelatte.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Bridgelatte.Abs.Ident -> Result
transIdent x = case x of
  Bridgelatte.Abs.Ident string -> failure x

transProg :: Bridgelatte.Abs.Prog -> Result
transProg x = case x of
  Bridgelatte.Abs.EmptyProg defs -> failure x
  Bridgelatte.Abs.Program defs expr -> failure x

transDef :: Bridgelatte.Abs.Def -> Result
transDef x = case x of
  Bridgelatte.Abs.TopDefShape shapedef -> failure x
  Bridgelatte.Abs.TopDefEval evaldef -> failure x

transType :: Bridgelatte.Abs.Type -> Result
transType x = case x of
  Bridgelatte.Abs.Int -> failure x

transShapeDef :: Bridgelatte.Abs.ShapeDef -> Result
transShapeDef x = case x of
  Bridgelatte.Abs.ShapeDef ident shapeexpr -> failure x

transEvalDef :: Bridgelatte.Abs.EvalDef -> Result
transEvalDef x = case x of
  Bridgelatte.Abs.EvalDef ident evalvals -> failure x

transEvalVal :: Bridgelatte.Abs.EvalVal -> Result
transEvalVal x = case x of
  Bridgelatte.Abs.EvalVal integer -> failure x

transShape :: Bridgelatte.Abs.Shape -> Result
transShape x = case x of
  Bridgelatte.Abs.ShapeOk shapeok -> failure x
  Bridgelatte.Abs.ShapeNeg shapeneg -> failure x

transShapeOk :: Bridgelatte.Abs.ShapeOk -> Result
transShapeOk x = case x of
  Bridgelatte.Abs.OneShapeOk suitcounts -> failure x

transShapeNeg :: Bridgelatte.Abs.ShapeNeg -> Result
transShapeNeg x = case x of
  Bridgelatte.Abs.OneShapeNeg shapeok -> failure x

transSuitInt :: Bridgelatte.Abs.SuitInt -> Result
transSuitInt x = case x of
  Bridgelatte.Abs.SuitInt integer -> failure x

transSuitCount :: Bridgelatte.Abs.SuitCount -> Result
transSuitCount x = case x of
  Bridgelatte.Abs.SuitIntCount suitint -> failure x
  Bridgelatte.Abs.SuitChoice suitints -> failure x

transShapeExpr :: Bridgelatte.Abs.ShapeExpr -> Result
transShapeExpr x = case x of
  Bridgelatte.Abs.ShapeSingleExpr shape -> failure x
  Bridgelatte.Abs.ShapeSum shapeexpr1 shapeexpr2 -> failure x

transExpr :: Bridgelatte.Abs.Expr -> Result
transExpr x = case x of
  Bridgelatte.Abs.HandAttr hand attr -> failure x
  Bridgelatte.Abs.ELitInt integer -> failure x
  Bridgelatte.Abs.ELitTrue -> failure x
  Bridgelatte.Abs.ELitFalse -> failure x
  Bridgelatte.Abs.Not expr -> failure x
  Bridgelatte.Abs.ERel expr1 relop expr2 -> failure x
  Bridgelatte.Abs.EAnd expr1 expr2 -> failure x
  Bridgelatte.Abs.EOr expr1 expr2 -> failure x

transHand :: Bridgelatte.Abs.Hand -> Result
transHand x = case x of
  Bridgelatte.Abs.HandN -> failure x
  Bridgelatte.Abs.HandE -> failure x
  Bridgelatte.Abs.HandW -> failure x
  Bridgelatte.Abs.HandS -> failure x

transLenAttr :: Bridgelatte.Abs.LenAttr -> Result
transLenAttr x = case x of
  Bridgelatte.Abs.AttrSpades -> failure x
  Bridgelatte.Abs.AttrHearts -> failure x
  Bridgelatte.Abs.AttrDiams -> failure x
  Bridgelatte.Abs.AttrClubs -> failure x

transSimpAttr :: Bridgelatte.Abs.SimpAttr -> Result
transSimpAttr x = case x of
  Bridgelatte.Abs.AttrHcp -> failure x

transAttr :: Bridgelatte.Abs.Attr -> Result
transAttr x = case x of
  Bridgelatte.Abs.AttrVar ident -> failure x
  Bridgelatte.Abs.LenAttr lenattr -> failure x
  Bridgelatte.Abs.SimpAttr simpattr -> failure x

transRelOp :: Bridgelatte.Abs.RelOp -> Result
transRelOp x = case x of
  Bridgelatte.Abs.LTH -> failure x
  Bridgelatte.Abs.LE -> failure x
  Bridgelatte.Abs.GTH -> failure x
  Bridgelatte.Abs.GE -> failure x
  Bridgelatte.Abs.EQU -> failure x
  Bridgelatte.Abs.NE -> failure x
