-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Bridgelatte/Par.y
-----------------------------------------------------------------------------


rule 10 is unused

terminal 'int' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Prog -> ListDef                                    (3)
	Prog -> ListDef Expr                               (4)
	Def -> ShapeDef                                    (5)
	Def -> EvalDef                                     (6)
	ListDef ->                                         (7)
	ListDef -> Def                                     (8)
	ListDef -> Def ';' ListDef                         (9)
	Type -> 'int'                                      (10)
	ShapeDef -> Ident '=' ListShape                    (11)
	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal ')'   (12)
	EvalVal -> Integer                                 (13)
	ListEvalVal ->                                     (14)
	ListEvalVal -> EvalVal                             (15)
	ListEvalVal -> EvalVal ',' ListEvalVal             (16)
	Shape -> ShapeOk                                   (17)
	Shape -> ShapeNeg                                  (18)
	ShapeOk -> '[' ListSuitCount ']'                   (19)
	ShapeNeg -> '!' ShapeOk                            (20)
	ListShape ->                                       (21)
	ListShape -> Shape                                 (22)
	ListShape -> Shape '+' ListShape                   (23)
	SuitCount -> SuitInt                               (24)
	SuitCount -> '(' ListSuitInt ')'                   (25)
	SuitInt -> Integer                                 (26)
	ListSuitCount ->                                   (27)
	ListSuitCount -> SuitCount                         (28)
	ListSuitCount -> SuitCount ';' ListSuitCount       (29)
	ListSuitInt ->                                     (30)
	ListSuitInt -> SuitInt                             (31)
	ListSuitInt -> SuitInt ';' ListSuitInt             (32)
	Expr6 -> Hand '.' Attr                             (33)
	Expr6 -> SimpAttr '(' Hand ')'                     (34)
	Expr6 -> Integer                                   (35)
	Expr6 -> 'true'                                    (36)
	Expr6 -> 'false'                                   (37)
	Expr6 -> '(' Expr ')'                              (38)
	Expr5 -> 'not' Expr6                               (39)
	Expr5 -> Expr6                                     (40)
	Expr2 -> Expr2 RelOp Expr3                         (41)
	Expr2 -> Expr3                                     (42)
	Expr1 -> Expr2 'and' Expr1                         (43)
	Expr1 -> Expr2                                     (44)
	Expr -> Expr1 'or' Expr                            (45)
	Expr -> Expr1                                      (46)
	Expr3 -> Expr4                                     (47)
	Expr4 -> Expr5                                     (48)
	Hand -> 'N'                                        (49)
	Hand -> 'E'                                        (50)
	Hand -> 'W'                                        (51)
	Hand -> 'S'                                        (52)
	LenAttr -> 'spades'                                (53)
	LenAttr -> 'hearts'                                (54)
	LenAttr -> 'diams'                                 (55)
	LenAttr -> 'clubs'                                 (56)
	SimpAttr -> 'hcp'                                  (57)
	SimpAttr -> 'freakness'                            (58)
	SimpAttr -> 'losers'                               (59)
	Attr -> Ident                                      (60)
	Attr -> LenAttr                                    (61)
	RelOp -> '<'                                       (62)
	RelOp -> '<='                                      (63)
	RelOp -> '>'                                       (64)
	RelOp -> '>='                                      (65)
	RelOp -> '=='                                      (66)
	RelOp -> '!='                                      (67)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	'+'            { PT _ (TS _ 5) }
	','            { PT _ (TS _ 6) }
	'.'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'<'            { PT _ (TS _ 9) }
	'<='           { PT _ (TS _ 10) }
	'='            { PT _ (TS _ 11) }
	'=='           { PT _ (TS _ 12) }
	'>'            { PT _ (TS _ 13) }
	'>='           { PT _ (TS _ 14) }
	'E'            { PT _ (TS _ 15) }
	'Evaluator'    { PT _ (TS _ 16) }
	'N'            { PT _ (TS _ 17) }
	'S'            { PT _ (TS _ 18) }
	'W'            { PT _ (TS _ 19) }
	'['            { PT _ (TS _ 20) }
	']'            { PT _ (TS _ 21) }
	'and'          { PT _ (TS _ 22) }
	'clubs'        { PT _ (TS _ 23) }
	'diams'        { PT _ (TS _ 24) }
	'false'        { PT _ (TS _ 25) }
	'freakness'    { PT _ (TS _ 26) }
	'hcp'          { PT _ (TS _ 27) }
	'hearts'       { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'losers'       { PT _ (TS _ 30) }
	'not'          { PT _ (TS _ 31) }
	'or'           { PT _ (TS _ 32) }
	'spades'       { PT _ (TS _ 33) }
	'true'         { PT _ (TS _ 34) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	Ident           rule  1
	Integer         rule  2
	Prog            rules 3, 4
	Def             rules 5, 6
	ListDef         rules 7, 8, 9
	Type            rule  10
	ShapeDef        rule  11
	EvalDef         rule  12
	EvalVal         rule  13
	ListEvalVal     rules 14, 15, 16
	Shape           rules 17, 18
	ShapeOk         rule  19
	ShapeNeg        rule  20
	ListShape       rules 21, 22, 23
	SuitCount       rules 24, 25
	SuitInt         rule  26
	ListSuitCount   rules 27, 28, 29
	ListSuitInt     rules 30, 31, 32
	Expr6           rules 33, 34, 35, 36, 37, 38
	Expr5           rules 39, 40
	Expr2           rules 41, 42
	Expr1           rules 43, 44
	Expr            rules 45, 46
	Expr3           rule  47
	Expr4           rule  48
	Hand            rules 49, 50, 51, 52
	LenAttr         rules 53, 54, 55, 56
	SimpAttr        rules 57, 58, 59
	Attr            rules 60, 61
	RelOp           rules 62, 63, 64, 65, 66, 67

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 7
	'E'            reduce using rule 7
	'N'            reduce using rule 7
	'S'            reduce using rule 7
	'W'            reduce using rule 7
	'false'        reduce using rule 7
	'freakness'    reduce using rule 7
	'hcp'          reduce using rule 7
	'losers'       reduce using rule 7
	'not'          reduce using rule 7
	'true'         reduce using rule 7
	L_Ident        shift, and enter state 2
	L_integ        reduce using rule 7
	%eof           reduce using rule 7

	Ident          goto state 3
	Prog           goto state 4
	Def            goto state 5
	ListDef        goto state 6
	ShapeDef       goto state 7
	EvalDef        goto state 8

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	')'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'or'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	ShapeDef -> Ident . '=' ListShape                   (rule 11)
	EvalDef -> Ident . '=' 'Evaluator' '(' ListEvalVal ')'    (rule 12)

	'='            shift, and enter state 32


State 4

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 5

	ListDef -> Def .                                    (rule 8)
	ListDef -> Def . ';' ListDef                        (rule 9)

	'('            reduce using rule 8
	';'            shift, and enter state 31
	'E'            reduce using rule 8
	'N'            reduce using rule 8
	'S'            reduce using rule 8
	'W'            reduce using rule 8
	'false'        reduce using rule 8
	'freakness'    reduce using rule 8
	'hcp'          reduce using rule 8
	'losers'       reduce using rule 8
	'not'          reduce using rule 8
	'true'         reduce using rule 8
	L_integ        reduce using rule 8
	%eof           reduce using rule 8


State 6

	Prog -> ListDef .                                   (rule 3)
	Prog -> ListDef . Expr                              (rule 4)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'not'          shift, and enter state 28
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30
	%eof           reduce using rule 3

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 14
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17
	SimpAttr       goto state 18

State 7

	Def -> ShapeDef .                                   (rule 5)

	'('            reduce using rule 5
	';'            reduce using rule 5
	'E'            reduce using rule 5
	'N'            reduce using rule 5
	'S'            reduce using rule 5
	'W'            reduce using rule 5
	'false'        reduce using rule 5
	'freakness'    reduce using rule 5
	'hcp'          reduce using rule 5
	'losers'       reduce using rule 5
	'not'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	%eof           reduce using rule 5


State 8

	Def -> EvalDef .                                    (rule 6)

	'('            reduce using rule 6
	';'            reduce using rule 6
	'E'            reduce using rule 6
	'N'            reduce using rule 6
	'S'            reduce using rule 6
	'W'            reduce using rule 6
	'false'        reduce using rule 6
	'freakness'    reduce using rule 6
	'hcp'          reduce using rule 6
	'losers'       reduce using rule 6
	'not'          reduce using rule 6
	'true'         reduce using rule 6
	L_integ        reduce using rule 6
	%eof           reduce using rule 6


State 9

	Expr6 -> Integer .                                  (rule 35)

	'!='           reduce using rule 35
	')'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'and'          reduce using rule 35
	'or'           reduce using rule 35
	%eof           reduce using rule 35


State 10

	Expr5 -> Expr6 .                                    (rule 40)

	'!='           reduce using rule 40
	')'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	%eof           reduce using rule 40


State 11

	Expr4 -> Expr5 .                                    (rule 48)

	'!='           reduce using rule 48
	')'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'and'          reduce using rule 48
	'or'           reduce using rule 48
	%eof           reduce using rule 48


State 12

	Expr2 -> Expr2 . RelOp Expr3                        (rule 41)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 43)
	Expr1 -> Expr2 .                                    (rule 44)

	'!='           shift, and enter state 47
	')'            reduce using rule 44
	'<'            shift, and enter state 48
	'<='           shift, and enter state 49
	'=='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'and'          shift, and enter state 53
	'or'           reduce using rule 44
	%eof           reduce using rule 44

	RelOp          goto state 46

State 13

	Expr -> Expr1 . 'or' Expr                           (rule 45)
	Expr -> Expr1 .                                     (rule 46)

	')'            reduce using rule 46
	'or'           shift, and enter state 45
	%eof           reduce using rule 46


State 14

	Prog -> ListDef Expr .                              (rule 4)

	%eof           reduce using rule 4


State 15

	Expr2 -> Expr3 .                                    (rule 42)

	'!='           reduce using rule 42
	')'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'and'          reduce using rule 42
	'or'           reduce using rule 42
	%eof           reduce using rule 42


State 16

	Expr3 -> Expr4 .                                    (rule 47)

	'!='           reduce using rule 47
	')'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'and'          reduce using rule 47
	'or'           reduce using rule 47
	%eof           reduce using rule 47


State 17

	Expr6 -> Hand . '.' Attr                            (rule 33)

	'.'            shift, and enter state 44


State 18

	Expr6 -> SimpAttr . '(' Hand ')'                    (rule 34)

	'('            shift, and enter state 43


State 19

	Expr6 -> '(' . Expr ')'                             (rule 38)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'not'          shift, and enter state 28
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 42
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17
	SimpAttr       goto state 18

State 20

	Hand -> 'E' .                                       (rule 50)

	')'            reduce using rule 50
	'.'            reduce using rule 50


State 21

	Hand -> 'N' .                                       (rule 49)

	')'            reduce using rule 49
	'.'            reduce using rule 49


State 22

	Hand -> 'S' .                                       (rule 52)

	')'            reduce using rule 52
	'.'            reduce using rule 52


State 23

	Hand -> 'W' .                                       (rule 51)

	')'            reduce using rule 51
	'.'            reduce using rule 51


State 24

	Expr6 -> 'false' .                                  (rule 37)

	'!='           reduce using rule 37
	')'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37
	%eof           reduce using rule 37


State 25

	SimpAttr -> 'freakness' .                           (rule 58)

	'('            reduce using rule 58


State 26

	SimpAttr -> 'hcp' .                                 (rule 57)

	'('            reduce using rule 57


State 27

	SimpAttr -> 'losers' .                              (rule 59)

	'('            reduce using rule 59


State 28

	Expr5 -> 'not' . Expr6                              (rule 39)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30

	Integer        goto state 9
	Expr6          goto state 41
	Hand           goto state 17
	SimpAttr       goto state 18

State 29

	Expr6 -> 'true' .                                   (rule 36)

	'!='           reduce using rule 36
	')'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'and'          reduce using rule 36
	'or'           reduce using rule 36
	%eof           reduce using rule 36


State 30

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'and'          reduce using rule 2
	'or'           reduce using rule 2
	%eof           reduce using rule 2


State 31

	ListDef -> Def ';' . ListDef                        (rule 9)

	'('            reduce using rule 7
	'E'            reduce using rule 7
	'N'            reduce using rule 7
	'S'            reduce using rule 7
	'W'            reduce using rule 7
	'false'        reduce using rule 7
	'freakness'    reduce using rule 7
	'hcp'          reduce using rule 7
	'losers'       reduce using rule 7
	'not'          reduce using rule 7
	'true'         reduce using rule 7
	L_Ident        shift, and enter state 2
	L_integ        reduce using rule 7
	%eof           reduce using rule 7

	Ident          goto state 3
	Def            goto state 5
	ListDef        goto state 40
	ShapeDef       goto state 7
	EvalDef        goto state 8

State 32

	ShapeDef -> Ident '=' . ListShape                   (rule 11)
	EvalDef -> Ident '=' . 'Evaluator' '(' ListEvalVal ')'    (rule 12)

	'!'            shift, and enter state 37
	'('            reduce using rule 21
	';'            reduce using rule 21
	'E'            reduce using rule 21
	'Evaluator'    shift, and enter state 38
	'N'            reduce using rule 21
	'S'            reduce using rule 21
	'W'            reduce using rule 21
	'['            shift, and enter state 39
	'false'        reduce using rule 21
	'freakness'    reduce using rule 21
	'hcp'          reduce using rule 21
	'losers'       reduce using rule 21
	'not'          reduce using rule 21
	'true'         reduce using rule 21
	L_integ        reduce using rule 21
	%eof           reduce using rule 21

	Shape          goto state 33
	ShapeOk        goto state 34
	ShapeNeg       goto state 35
	ListShape      goto state 36

State 33

	ListShape -> Shape .                                (rule 22)
	ListShape -> Shape . '+' ListShape                  (rule 23)

	'('            reduce using rule 22
	'+'            shift, and enter state 73
	';'            reduce using rule 22
	'E'            reduce using rule 22
	'N'            reduce using rule 22
	'S'            reduce using rule 22
	'W'            reduce using rule 22
	'false'        reduce using rule 22
	'freakness'    reduce using rule 22
	'hcp'          reduce using rule 22
	'losers'       reduce using rule 22
	'not'          reduce using rule 22
	'true'         reduce using rule 22
	L_integ        reduce using rule 22
	%eof           reduce using rule 22


State 34

	Shape -> ShapeOk .                                  (rule 17)

	'('            reduce using rule 17
	'+'            reduce using rule 17
	';'            reduce using rule 17
	'E'            reduce using rule 17
	'N'            reduce using rule 17
	'S'            reduce using rule 17
	'W'            reduce using rule 17
	'false'        reduce using rule 17
	'freakness'    reduce using rule 17
	'hcp'          reduce using rule 17
	'losers'       reduce using rule 17
	'not'          reduce using rule 17
	'true'         reduce using rule 17
	L_integ        reduce using rule 17
	%eof           reduce using rule 17


State 35

	Shape -> ShapeNeg .                                 (rule 18)

	'('            reduce using rule 18
	'+'            reduce using rule 18
	';'            reduce using rule 18
	'E'            reduce using rule 18
	'N'            reduce using rule 18
	'S'            reduce using rule 18
	'W'            reduce using rule 18
	'false'        reduce using rule 18
	'freakness'    reduce using rule 18
	'hcp'          reduce using rule 18
	'losers'       reduce using rule 18
	'not'          reduce using rule 18
	'true'         reduce using rule 18
	L_integ        reduce using rule 18
	%eof           reduce using rule 18


State 36

	ShapeDef -> Ident '=' ListShape .                   (rule 11)

	'('            reduce using rule 11
	';'            reduce using rule 11
	'E'            reduce using rule 11
	'N'            reduce using rule 11
	'S'            reduce using rule 11
	'W'            reduce using rule 11
	'false'        reduce using rule 11
	'freakness'    reduce using rule 11
	'hcp'          reduce using rule 11
	'losers'       reduce using rule 11
	'not'          reduce using rule 11
	'true'         reduce using rule 11
	L_integ        reduce using rule 11
	%eof           reduce using rule 11


State 37

	ShapeNeg -> '!' . ShapeOk                           (rule 20)

	'['            shift, and enter state 39

	ShapeOk        goto state 72

State 38

	EvalDef -> Ident '=' 'Evaluator' . '(' ListEvalVal ')'    (rule 12)

	'('            shift, and enter state 71


State 39

	ShapeOk -> '[' . ListSuitCount ']'                  (rule 19)

	'('            shift, and enter state 70
	']'            reduce using rule 27
	L_integ        shift, and enter state 30

	Integer        goto state 66
	SuitCount      goto state 67
	SuitInt        goto state 68
	ListSuitCount  goto state 69

State 40

	ListDef -> Def ';' ListDef .                        (rule 9)

	'('            reduce using rule 9
	'E'            reduce using rule 9
	'N'            reduce using rule 9
	'S'            reduce using rule 9
	'W'            reduce using rule 9
	'false'        reduce using rule 9
	'freakness'    reduce using rule 9
	'hcp'          reduce using rule 9
	'losers'       reduce using rule 9
	'not'          reduce using rule 9
	'true'         reduce using rule 9
	L_integ        reduce using rule 9
	%eof           reduce using rule 9


State 41

	Expr5 -> 'not' Expr6 .                              (rule 39)

	'!='           reduce using rule 39
	')'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39
	%eof           reduce using rule 39


State 42

	Expr6 -> '(' Expr . ')'                             (rule 38)

	')'            shift, and enter state 65


State 43

	Expr6 -> SimpAttr '(' . Hand ')'                    (rule 34)

	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23

	Hand           goto state 64

State 44

	Expr6 -> Hand '.' . Attr                            (rule 33)

	'clubs'        shift, and enter state 60
	'diams'        shift, and enter state 61
	'hearts'       shift, and enter state 62
	'spades'       shift, and enter state 63
	L_Ident        shift, and enter state 2

	Ident          goto state 57
	LenAttr        goto state 58
	Attr           goto state 59

State 45

	Expr -> Expr1 'or' . Expr                           (rule 45)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'not'          shift, and enter state 28
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 56
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17
	SimpAttr       goto state 18

State 46

	Expr2 -> Expr2 RelOp . Expr3                        (rule 41)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'not'          shift, and enter state 28
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr3          goto state 55
	Expr4          goto state 16
	Hand           goto state 17
	SimpAttr       goto state 18

State 47

	RelOp -> '!=' .                                     (rule 67)

	'('            reduce using rule 67
	'E'            reduce using rule 67
	'N'            reduce using rule 67
	'S'            reduce using rule 67
	'W'            reduce using rule 67
	'false'        reduce using rule 67
	'freakness'    reduce using rule 67
	'hcp'          reduce using rule 67
	'losers'       reduce using rule 67
	'not'          reduce using rule 67
	'true'         reduce using rule 67
	L_integ        reduce using rule 67


State 48

	RelOp -> '<' .                                      (rule 62)

	'('            reduce using rule 62
	'E'            reduce using rule 62
	'N'            reduce using rule 62
	'S'            reduce using rule 62
	'W'            reduce using rule 62
	'false'        reduce using rule 62
	'freakness'    reduce using rule 62
	'hcp'          reduce using rule 62
	'losers'       reduce using rule 62
	'not'          reduce using rule 62
	'true'         reduce using rule 62
	L_integ        reduce using rule 62


State 49

	RelOp -> '<=' .                                     (rule 63)

	'('            reduce using rule 63
	'E'            reduce using rule 63
	'N'            reduce using rule 63
	'S'            reduce using rule 63
	'W'            reduce using rule 63
	'false'        reduce using rule 63
	'freakness'    reduce using rule 63
	'hcp'          reduce using rule 63
	'losers'       reduce using rule 63
	'not'          reduce using rule 63
	'true'         reduce using rule 63
	L_integ        reduce using rule 63


State 50

	RelOp -> '==' .                                     (rule 66)

	'('            reduce using rule 66
	'E'            reduce using rule 66
	'N'            reduce using rule 66
	'S'            reduce using rule 66
	'W'            reduce using rule 66
	'false'        reduce using rule 66
	'freakness'    reduce using rule 66
	'hcp'          reduce using rule 66
	'losers'       reduce using rule 66
	'not'          reduce using rule 66
	'true'         reduce using rule 66
	L_integ        reduce using rule 66


State 51

	RelOp -> '>' .                                      (rule 64)

	'('            reduce using rule 64
	'E'            reduce using rule 64
	'N'            reduce using rule 64
	'S'            reduce using rule 64
	'W'            reduce using rule 64
	'false'        reduce using rule 64
	'freakness'    reduce using rule 64
	'hcp'          reduce using rule 64
	'losers'       reduce using rule 64
	'not'          reduce using rule 64
	'true'         reduce using rule 64
	L_integ        reduce using rule 64


State 52

	RelOp -> '>=' .                                     (rule 65)

	'('            reduce using rule 65
	'E'            reduce using rule 65
	'N'            reduce using rule 65
	'S'            reduce using rule 65
	'W'            reduce using rule 65
	'false'        reduce using rule 65
	'freakness'    reduce using rule 65
	'hcp'          reduce using rule 65
	'losers'       reduce using rule 65
	'not'          reduce using rule 65
	'true'         reduce using rule 65
	L_integ        reduce using rule 65


State 53

	Expr1 -> Expr2 'and' . Expr1                        (rule 43)

	'('            shift, and enter state 19
	'E'            shift, and enter state 20
	'N'            shift, and enter state 21
	'S'            shift, and enter state 22
	'W'            shift, and enter state 23
	'false'        shift, and enter state 24
	'freakness'    shift, and enter state 25
	'hcp'          shift, and enter state 26
	'losers'       shift, and enter state 27
	'not'          shift, and enter state 28
	'true'         shift, and enter state 29
	L_integ        shift, and enter state 30

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 54
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17
	SimpAttr       goto state 18

State 54

	Expr1 -> Expr2 'and' Expr1 .                        (rule 43)

	')'            reduce using rule 43
	'or'           reduce using rule 43
	%eof           reduce using rule 43


State 55

	Expr2 -> Expr2 RelOp Expr3 .                        (rule 41)

	'!='           reduce using rule 41
	')'            reduce using rule 41
	'<'            reduce using rule 41
	'<='           reduce using rule 41
	'=='           reduce using rule 41
	'>'            reduce using rule 41
	'>='           reduce using rule 41
	'and'          reduce using rule 41
	'or'           reduce using rule 41
	%eof           reduce using rule 41


State 56

	Expr -> Expr1 'or' Expr .                           (rule 45)

	')'            reduce using rule 45
	%eof           reduce using rule 45


State 57

	Attr -> Ident .                                     (rule 60)

	'!='           reduce using rule 60
	')'            reduce using rule 60
	'<'            reduce using rule 60
	'<='           reduce using rule 60
	'=='           reduce using rule 60
	'>'            reduce using rule 60
	'>='           reduce using rule 60
	'and'          reduce using rule 60
	'or'           reduce using rule 60
	%eof           reduce using rule 60


State 58

	Attr -> LenAttr .                                   (rule 61)

	'!='           reduce using rule 61
	')'            reduce using rule 61
	'<'            reduce using rule 61
	'<='           reduce using rule 61
	'=='           reduce using rule 61
	'>'            reduce using rule 61
	'>='           reduce using rule 61
	'and'          reduce using rule 61
	'or'           reduce using rule 61
	%eof           reduce using rule 61


State 59

	Expr6 -> Hand '.' Attr .                            (rule 33)

	'!='           reduce using rule 33
	')'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'and'          reduce using rule 33
	'or'           reduce using rule 33
	%eof           reduce using rule 33


State 60

	LenAttr -> 'clubs' .                                (rule 56)

	'!='           reduce using rule 56
	')'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'and'          reduce using rule 56
	'or'           reduce using rule 56
	%eof           reduce using rule 56


State 61

	LenAttr -> 'diams' .                                (rule 55)

	'!='           reduce using rule 55
	')'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'and'          reduce using rule 55
	'or'           reduce using rule 55
	%eof           reduce using rule 55


State 62

	LenAttr -> 'hearts' .                               (rule 54)

	'!='           reduce using rule 54
	')'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'and'          reduce using rule 54
	'or'           reduce using rule 54
	%eof           reduce using rule 54


State 63

	LenAttr -> 'spades' .                               (rule 53)

	'!='           reduce using rule 53
	')'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'and'          reduce using rule 53
	'or'           reduce using rule 53
	%eof           reduce using rule 53


State 64

	Expr6 -> SimpAttr '(' Hand . ')'                    (rule 34)

	')'            shift, and enter state 82


State 65

	Expr6 -> '(' Expr ')' .                             (rule 38)

	'!='           reduce using rule 38
	')'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'and'          reduce using rule 38
	'or'           reduce using rule 38
	%eof           reduce using rule 38


State 66

	SuitInt -> Integer .                                (rule 26)

	')'            reduce using rule 26
	';'            reduce using rule 26
	']'            reduce using rule 26


State 67

	ListSuitCount -> SuitCount .                        (rule 28)
	ListSuitCount -> SuitCount . ';' ListSuitCount      (rule 29)

	';'            shift, and enter state 81
	']'            reduce using rule 28


State 68

	SuitCount -> SuitInt .                              (rule 24)

	';'            reduce using rule 24
	']'            reduce using rule 24


State 69

	ShapeOk -> '[' ListSuitCount . ']'                  (rule 19)

	']'            shift, and enter state 80


State 70

	SuitCount -> '(' . ListSuitInt ')'                  (rule 25)

	')'            reduce using rule 30
	L_integ        shift, and enter state 30

	Integer        goto state 66
	SuitInt        goto state 78
	ListSuitInt    goto state 79

State 71

	EvalDef -> Ident '=' 'Evaluator' '(' . ListEvalVal ')'    (rule 12)

	')'            reduce using rule 14
	L_integ        shift, and enter state 30

	Integer        goto state 75
	EvalVal        goto state 76
	ListEvalVal    goto state 77

State 72

	ShapeNeg -> '!' ShapeOk .                           (rule 20)

	'('            reduce using rule 20
	'+'            reduce using rule 20
	';'            reduce using rule 20
	'E'            reduce using rule 20
	'N'            reduce using rule 20
	'S'            reduce using rule 20
	'W'            reduce using rule 20
	'false'        reduce using rule 20
	'freakness'    reduce using rule 20
	'hcp'          reduce using rule 20
	'losers'       reduce using rule 20
	'not'          reduce using rule 20
	'true'         reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 73

	ListShape -> Shape '+' . ListShape                  (rule 23)

	'!'            shift, and enter state 37
	'('            reduce using rule 21
	';'            reduce using rule 21
	'E'            reduce using rule 21
	'N'            reduce using rule 21
	'S'            reduce using rule 21
	'W'            reduce using rule 21
	'['            shift, and enter state 39
	'false'        reduce using rule 21
	'freakness'    reduce using rule 21
	'hcp'          reduce using rule 21
	'losers'       reduce using rule 21
	'not'          reduce using rule 21
	'true'         reduce using rule 21
	L_integ        reduce using rule 21
	%eof           reduce using rule 21

	Shape          goto state 33
	ShapeOk        goto state 34
	ShapeNeg       goto state 35
	ListShape      goto state 74

State 74

	ListShape -> Shape '+' ListShape .                  (rule 23)

	'('            reduce using rule 23
	';'            reduce using rule 23
	'E'            reduce using rule 23
	'N'            reduce using rule 23
	'S'            reduce using rule 23
	'W'            reduce using rule 23
	'false'        reduce using rule 23
	'freakness'    reduce using rule 23
	'hcp'          reduce using rule 23
	'losers'       reduce using rule 23
	'not'          reduce using rule 23
	'true'         reduce using rule 23
	L_integ        reduce using rule 23
	%eof           reduce using rule 23


State 75

	EvalVal -> Integer .                                (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13


State 76

	ListEvalVal -> EvalVal .                            (rule 15)
	ListEvalVal -> EvalVal . ',' ListEvalVal            (rule 16)

	')'            reduce using rule 15
	','            shift, and enter state 87


State 77

	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal . ')'    (rule 12)

	')'            shift, and enter state 86


State 78

	ListSuitInt -> SuitInt .                            (rule 31)
	ListSuitInt -> SuitInt . ';' ListSuitInt            (rule 32)

	')'            reduce using rule 31
	';'            shift, and enter state 85


State 79

	SuitCount -> '(' ListSuitInt . ')'                  (rule 25)

	')'            shift, and enter state 84


State 80

	ShapeOk -> '[' ListSuitCount ']' .                  (rule 19)

	'('            reduce using rule 19
	'+'            reduce using rule 19
	';'            reduce using rule 19
	'E'            reduce using rule 19
	'N'            reduce using rule 19
	'S'            reduce using rule 19
	'W'            reduce using rule 19
	'false'        reduce using rule 19
	'freakness'    reduce using rule 19
	'hcp'          reduce using rule 19
	'losers'       reduce using rule 19
	'not'          reduce using rule 19
	'true'         reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 81

	ListSuitCount -> SuitCount ';' . ListSuitCount      (rule 29)

	'('            shift, and enter state 70
	']'            reduce using rule 27
	L_integ        shift, and enter state 30

	Integer        goto state 66
	SuitCount      goto state 67
	SuitInt        goto state 68
	ListSuitCount  goto state 83

State 82

	Expr6 -> SimpAttr '(' Hand ')' .                    (rule 34)

	'!='           reduce using rule 34
	')'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'and'          reduce using rule 34
	'or'           reduce using rule 34
	%eof           reduce using rule 34


State 83

	ListSuitCount -> SuitCount ';' ListSuitCount .      (rule 29)

	']'            reduce using rule 29


State 84

	SuitCount -> '(' ListSuitInt ')' .                  (rule 25)

	';'            reduce using rule 25
	']'            reduce using rule 25


State 85

	ListSuitInt -> SuitInt ';' . ListSuitInt            (rule 32)

	')'            reduce using rule 30
	L_integ        shift, and enter state 30

	Integer        goto state 66
	SuitInt        goto state 78
	ListSuitInt    goto state 89

State 86

	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal ')' .    (rule 12)

	'('            reduce using rule 12
	';'            reduce using rule 12
	'E'            reduce using rule 12
	'N'            reduce using rule 12
	'S'            reduce using rule 12
	'W'            reduce using rule 12
	'false'        reduce using rule 12
	'freakness'    reduce using rule 12
	'hcp'          reduce using rule 12
	'losers'       reduce using rule 12
	'not'          reduce using rule 12
	'true'         reduce using rule 12
	L_integ        reduce using rule 12
	%eof           reduce using rule 12


State 87

	ListEvalVal -> EvalVal ',' . ListEvalVal            (rule 16)

	')'            reduce using rule 14
	L_integ        shift, and enter state 30

	Integer        goto state 75
	EvalVal        goto state 76
	ListEvalVal    goto state 88

State 88

	ListEvalVal -> EvalVal ',' ListEvalVal .            (rule 16)

	')'            reduce using rule 16


State 89

	ListSuitInt -> SuitInt ';' ListSuitInt .            (rule 32)

	')'            reduce using rule 32


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 68
Number of terminals: 36
Number of non-terminals: 31
Number of states: 90
