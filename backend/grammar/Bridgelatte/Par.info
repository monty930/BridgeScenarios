-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Bridgelatte/Par.y
-----------------------------------------------------------------------------

state 71 contains 1 shift/reduce conflicts.

rule 10 is unused

terminal 'int' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	Prog -> ListDef                                    (3)
	Prog -> ListDef Expr                               (4)
	Def -> ShapeDef                                    (5)
	Def -> EvalDef                                     (6)
	ListDef ->                                         (7)
	ListDef -> Def                                     (8)
	ListDef -> Def ';' ListDef                         (9)
	Type -> 'int'                                      (10)
	ShapeDef -> Ident '=' ShapeExpr                    (11)
	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal ')'   (12)
	EvalVal -> Integer                                 (13)
	ListEvalVal ->                                     (14)
	ListEvalVal -> EvalVal                             (15)
	ListEvalVal -> EvalVal ',' ListEvalVal             (16)
	Shape -> ShapeOk                                   (17)
	Shape -> ShapeNeg                                  (18)
	ShapeOk -> '[' ListSuitCount ']'                   (19)
	ShapeNeg -> '!' ShapeOk                            (20)
	SuitInt -> Integer                                 (21)
	SuitCount -> SuitInt                               (22)
	SuitCount -> '(' ListSuitInt ')'                   (23)
	ListSuitCount ->                                   (24)
	ListSuitCount -> SuitCount                         (25)
	ListSuitCount -> SuitCount ';' ListSuitCount       (26)
	ListSuitInt ->                                     (27)
	ListSuitInt -> SuitInt                             (28)
	ListSuitInt -> SuitInt ';' ListSuitInt             (29)
	ShapeExpr -> Shape                                 (30)
	ShapeExpr -> ShapeExpr '+' ShapeExpr               (31)
	Expr6 -> Hand '.' Attr                             (32)
	Expr6 -> Integer                                   (33)
	Expr6 -> 'true'                                    (34)
	Expr6 -> 'false'                                   (35)
	Expr6 -> '(' Expr ')'                              (36)
	Expr5 -> 'not' Expr6                               (37)
	Expr5 -> Expr6                                     (38)
	Expr2 -> Expr2 RelOp Expr3                         (39)
	Expr2 -> Expr3                                     (40)
	Expr1 -> Expr2 'and' Expr1                         (41)
	Expr1 -> Expr2                                     (42)
	Expr -> Expr1 'or' Expr                            (43)
	Expr -> Expr1                                      (44)
	Expr3 -> Expr4                                     (45)
	Expr4 -> Expr5                                     (46)
	Hand -> 'N'                                        (47)
	Hand -> 'E'                                        (48)
	Hand -> 'W'                                        (49)
	Hand -> 'S'                                        (50)
	LenAttr -> 'spades'                                (51)
	LenAttr -> 'hearts'                                (52)
	LenAttr -> 'diams'                                 (53)
	LenAttr -> 'clubs'                                 (54)
	SimpAttr -> 'hcp'                                  (55)
	VarAttr -> Ident                                   (56)
	Attr -> LenAttr                                    (57)
	Attr -> SimpAttr                                   (58)
	Attr -> VarAttr                                    (59)
	RelOp -> '<'                                       (60)
	RelOp -> '<='                                      (61)
	RelOp -> '>'                                       (62)
	RelOp -> '>='                                      (63)
	RelOp -> '=='                                      (64)
	RelOp -> '!='                                      (65)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	'+'            { PT _ (TS _ 5) }
	','            { PT _ (TS _ 6) }
	'.'            { PT _ (TS _ 7) }
	';'            { PT _ (TS _ 8) }
	'<'            { PT _ (TS _ 9) }
	'<='           { PT _ (TS _ 10) }
	'='            { PT _ (TS _ 11) }
	'=='           { PT _ (TS _ 12) }
	'>'            { PT _ (TS _ 13) }
	'>='           { PT _ (TS _ 14) }
	'E'            { PT _ (TS _ 15) }
	'Evaluator'    { PT _ (TS _ 16) }
	'N'            { PT _ (TS _ 17) }
	'S'            { PT _ (TS _ 18) }
	'W'            { PT _ (TS _ 19) }
	'['            { PT _ (TS _ 20) }
	']'            { PT _ (TS _ 21) }
	'and'          { PT _ (TS _ 22) }
	'clubs'        { PT _ (TS _ 23) }
	'diams'        { PT _ (TS _ 24) }
	'false'        { PT _ (TS _ 25) }
	'hcp'          { PT _ (TS _ 26) }
	'hearts'       { PT _ (TS _ 27) }
	'int'          { PT _ (TS _ 28) }
	'not'          { PT _ (TS _ 29) }
	'or'           { PT _ (TS _ 30) }
	'spades'       { PT _ (TS _ 31) }
	'true'         { PT _ (TS _ 32) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	Ident           rule  1
	Integer         rule  2
	Prog            rules 3, 4
	Def             rules 5, 6
	ListDef         rules 7, 8, 9
	Type            rule  10
	ShapeDef        rule  11
	EvalDef         rule  12
	EvalVal         rule  13
	ListEvalVal     rules 14, 15, 16
	Shape           rules 17, 18
	ShapeOk         rule  19
	ShapeNeg        rule  20
	SuitInt         rule  21
	SuitCount       rules 22, 23
	ListSuitCount   rules 24, 25, 26
	ListSuitInt     rules 27, 28, 29
	ShapeExpr       rules 30, 31
	Expr6           rules 32, 33, 34, 35, 36
	Expr5           rules 37, 38
	Expr2           rules 39, 40
	Expr1           rules 41, 42
	Expr            rules 43, 44
	Expr3           rule  45
	Expr4           rule  46
	Hand            rules 47, 48, 49, 50
	LenAttr         rules 51, 52, 53, 54
	SimpAttr        rule  55
	VarAttr         rule  56
	Attr            rules 57, 58, 59
	RelOp           rules 60, 61, 62, 63, 64, 65

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 7
	'E'            reduce using rule 7
	'N'            reduce using rule 7
	'S'            reduce using rule 7
	'W'            reduce using rule 7
	'false'        reduce using rule 7
	'not'          reduce using rule 7
	'true'         reduce using rule 7
	L_Ident        shift, and enter state 2
	L_integ        reduce using rule 7
	%eof           reduce using rule 7

	Ident          goto state 3
	Prog           goto state 4
	Def            goto state 5
	ListDef        goto state 6
	ShapeDef       goto state 7
	EvalDef        goto state 8

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	')'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'='            reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'or'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	ShapeDef -> Ident . '=' ShapeExpr                   (rule 11)
	EvalDef -> Ident . '=' 'Evaluator' '(' ListEvalVal ')'    (rule 12)

	'='            shift, and enter state 28


State 4

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 5

	ListDef -> Def .                                    (rule 8)
	ListDef -> Def . ';' ListDef                        (rule 9)

	'('            reduce using rule 8
	';'            shift, and enter state 27
	'E'            reduce using rule 8
	'N'            reduce using rule 8
	'S'            reduce using rule 8
	'W'            reduce using rule 8
	'false'        reduce using rule 8
	'not'          reduce using rule 8
	'true'         reduce using rule 8
	L_integ        reduce using rule 8
	%eof           reduce using rule 8


State 6

	Prog -> ListDef .                                   (rule 3)
	Prog -> ListDef . Expr                              (rule 4)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'not'          shift, and enter state 24
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26
	%eof           reduce using rule 3

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 14
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17

State 7

	Def -> ShapeDef .                                   (rule 5)

	'('            reduce using rule 5
	';'            reduce using rule 5
	'E'            reduce using rule 5
	'N'            reduce using rule 5
	'S'            reduce using rule 5
	'W'            reduce using rule 5
	'false'        reduce using rule 5
	'not'          reduce using rule 5
	'true'         reduce using rule 5
	L_integ        reduce using rule 5
	%eof           reduce using rule 5


State 8

	Def -> EvalDef .                                    (rule 6)

	'('            reduce using rule 6
	';'            reduce using rule 6
	'E'            reduce using rule 6
	'N'            reduce using rule 6
	'S'            reduce using rule 6
	'W'            reduce using rule 6
	'false'        reduce using rule 6
	'not'          reduce using rule 6
	'true'         reduce using rule 6
	L_integ        reduce using rule 6
	%eof           reduce using rule 6


State 9

	Expr6 -> Integer .                                  (rule 33)

	'!='           reduce using rule 33
	')'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'=='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'and'          reduce using rule 33
	'or'           reduce using rule 33
	%eof           reduce using rule 33


State 10

	Expr5 -> Expr6 .                                    (rule 38)

	'!='           reduce using rule 38
	')'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'=='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'and'          reduce using rule 38
	'or'           reduce using rule 38
	%eof           reduce using rule 38


State 11

	Expr4 -> Expr5 .                                    (rule 46)

	'!='           reduce using rule 46
	')'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'and'          reduce using rule 46
	'or'           reduce using rule 46
	%eof           reduce using rule 46


State 12

	Expr2 -> Expr2 . RelOp Expr3                        (rule 39)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 41)
	Expr1 -> Expr2 .                                    (rule 42)

	'!='           shift, and enter state 42
	')'            reduce using rule 42
	'<'            shift, and enter state 43
	'<='           shift, and enter state 44
	'=='           shift, and enter state 45
	'>'            shift, and enter state 46
	'>='           shift, and enter state 47
	'and'          shift, and enter state 48
	'or'           reduce using rule 42
	%eof           reduce using rule 42

	RelOp          goto state 41

State 13

	Expr -> Expr1 . 'or' Expr                           (rule 43)
	Expr -> Expr1 .                                     (rule 44)

	')'            reduce using rule 44
	'or'           shift, and enter state 40
	%eof           reduce using rule 44


State 14

	Prog -> ListDef Expr .                              (rule 4)

	%eof           reduce using rule 4


State 15

	Expr2 -> Expr3 .                                    (rule 40)

	'!='           reduce using rule 40
	')'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'=='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'and'          reduce using rule 40
	'or'           reduce using rule 40
	%eof           reduce using rule 40


State 16

	Expr3 -> Expr4 .                                    (rule 45)

	'!='           reduce using rule 45
	')'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'and'          reduce using rule 45
	'or'           reduce using rule 45
	%eof           reduce using rule 45


State 17

	Expr6 -> Hand . '.' Attr                            (rule 32)

	'.'            shift, and enter state 39


State 18

	Expr6 -> '(' . Expr ')'                             (rule 36)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'not'          shift, and enter state 24
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 38
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17

State 19

	Hand -> 'E' .                                       (rule 48)

	'.'            reduce using rule 48


State 20

	Hand -> 'N' .                                       (rule 47)

	'.'            reduce using rule 47


State 21

	Hand -> 'S' .                                       (rule 50)

	'.'            reduce using rule 50


State 22

	Hand -> 'W' .                                       (rule 49)

	'.'            reduce using rule 49


State 23

	Expr6 -> 'false' .                                  (rule 35)

	'!='           reduce using rule 35
	')'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'=='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'and'          reduce using rule 35
	'or'           reduce using rule 35
	%eof           reduce using rule 35


State 24

	Expr5 -> 'not' . Expr6                              (rule 37)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26

	Integer        goto state 9
	Expr6          goto state 37
	Hand           goto state 17

State 25

	Expr6 -> 'true' .                                   (rule 34)

	'!='           reduce using rule 34
	')'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'=='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'and'          reduce using rule 34
	'or'           reduce using rule 34
	%eof           reduce using rule 34


State 26

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	']'            reduce using rule 2
	'and'          reduce using rule 2
	'or'           reduce using rule 2
	%eof           reduce using rule 2


State 27

	ListDef -> Def ';' . ListDef                        (rule 9)

	'('            reduce using rule 7
	'E'            reduce using rule 7
	'N'            reduce using rule 7
	'S'            reduce using rule 7
	'W'            reduce using rule 7
	'false'        reduce using rule 7
	'not'          reduce using rule 7
	'true'         reduce using rule 7
	L_Ident        shift, and enter state 2
	L_integ        reduce using rule 7
	%eof           reduce using rule 7

	Ident          goto state 3
	Def            goto state 5
	ListDef        goto state 36
	ShapeDef       goto state 7
	EvalDef        goto state 8

State 28

	ShapeDef -> Ident '=' . ShapeExpr                   (rule 11)
	EvalDef -> Ident '=' . 'Evaluator' '(' ListEvalVal ')'    (rule 12)

	'!'            shift, and enter state 33
	'Evaluator'    shift, and enter state 34
	'['            shift, and enter state 35

	Shape          goto state 29
	ShapeOk        goto state 30
	ShapeNeg       goto state 31
	ShapeExpr      goto state 32

State 29

	ShapeExpr -> Shape .                                (rule 30)

	'('            reduce using rule 30
	'+'            reduce using rule 30
	';'            reduce using rule 30
	'E'            reduce using rule 30
	'N'            reduce using rule 30
	'S'            reduce using rule 30
	'W'            reduce using rule 30
	'false'        reduce using rule 30
	'not'          reduce using rule 30
	'true'         reduce using rule 30
	L_integ        reduce using rule 30
	%eof           reduce using rule 30


State 30

	Shape -> ShapeOk .                                  (rule 17)

	'('            reduce using rule 17
	'+'            reduce using rule 17
	';'            reduce using rule 17
	'E'            reduce using rule 17
	'N'            reduce using rule 17
	'S'            reduce using rule 17
	'W'            reduce using rule 17
	'false'        reduce using rule 17
	'not'          reduce using rule 17
	'true'         reduce using rule 17
	L_integ        reduce using rule 17
	%eof           reduce using rule 17


State 31

	Shape -> ShapeNeg .                                 (rule 18)

	'('            reduce using rule 18
	'+'            reduce using rule 18
	';'            reduce using rule 18
	'E'            reduce using rule 18
	'N'            reduce using rule 18
	'S'            reduce using rule 18
	'W'            reduce using rule 18
	'false'        reduce using rule 18
	'not'          reduce using rule 18
	'true'         reduce using rule 18
	L_integ        reduce using rule 18
	%eof           reduce using rule 18


State 32

	ShapeDef -> Ident '=' ShapeExpr .                   (rule 11)
	ShapeExpr -> ShapeExpr . '+' ShapeExpr              (rule 31)

	'('            reduce using rule 11
	'+'            shift, and enter state 70
	';'            reduce using rule 11
	'E'            reduce using rule 11
	'N'            reduce using rule 11
	'S'            reduce using rule 11
	'W'            reduce using rule 11
	'false'        reduce using rule 11
	'not'          reduce using rule 11
	'true'         reduce using rule 11
	L_integ        reduce using rule 11
	%eof           reduce using rule 11


State 33

	ShapeNeg -> '!' . ShapeOk                           (rule 20)

	'['            shift, and enter state 35

	ShapeOk        goto state 69

State 34

	EvalDef -> Ident '=' 'Evaluator' . '(' ListEvalVal ')'    (rule 12)

	'('            shift, and enter state 68


State 35

	ShapeOk -> '[' . ListSuitCount ']'                  (rule 19)

	'('            shift, and enter state 67
	']'            reduce using rule 24
	L_integ        shift, and enter state 26

	Integer        goto state 63
	SuitInt        goto state 64
	SuitCount      goto state 65
	ListSuitCount  goto state 66

State 36

	ListDef -> Def ';' ListDef .                        (rule 9)

	'('            reduce using rule 9
	'E'            reduce using rule 9
	'N'            reduce using rule 9
	'S'            reduce using rule 9
	'W'            reduce using rule 9
	'false'        reduce using rule 9
	'not'          reduce using rule 9
	'true'         reduce using rule 9
	L_integ        reduce using rule 9
	%eof           reduce using rule 9


State 37

	Expr5 -> 'not' Expr6 .                              (rule 37)

	'!='           reduce using rule 37
	')'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'=='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'and'          reduce using rule 37
	'or'           reduce using rule 37
	%eof           reduce using rule 37


State 38

	Expr6 -> '(' Expr . ')'                             (rule 36)

	')'            shift, and enter state 62


State 39

	Expr6 -> Hand '.' . Attr                            (rule 32)

	'clubs'        shift, and enter state 57
	'diams'        shift, and enter state 58
	'hcp'          shift, and enter state 59
	'hearts'       shift, and enter state 60
	'spades'       shift, and enter state 61
	L_Ident        shift, and enter state 2

	Ident          goto state 52
	LenAttr        goto state 53
	SimpAttr       goto state 54
	VarAttr        goto state 55
	Attr           goto state 56

State 40

	Expr -> Expr1 'or' . Expr                           (rule 43)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'not'          shift, and enter state 24
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 13
	Expr           goto state 51
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17

State 41

	Expr2 -> Expr2 RelOp . Expr3                        (rule 39)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'not'          shift, and enter state 24
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr3          goto state 50
	Expr4          goto state 16
	Hand           goto state 17

State 42

	RelOp -> '!=' .                                     (rule 65)

	'('            reduce using rule 65
	'E'            reduce using rule 65
	'N'            reduce using rule 65
	'S'            reduce using rule 65
	'W'            reduce using rule 65
	'false'        reduce using rule 65
	'not'          reduce using rule 65
	'true'         reduce using rule 65
	L_integ        reduce using rule 65


State 43

	RelOp -> '<' .                                      (rule 60)

	'('            reduce using rule 60
	'E'            reduce using rule 60
	'N'            reduce using rule 60
	'S'            reduce using rule 60
	'W'            reduce using rule 60
	'false'        reduce using rule 60
	'not'          reduce using rule 60
	'true'         reduce using rule 60
	L_integ        reduce using rule 60


State 44

	RelOp -> '<=' .                                     (rule 61)

	'('            reduce using rule 61
	'E'            reduce using rule 61
	'N'            reduce using rule 61
	'S'            reduce using rule 61
	'W'            reduce using rule 61
	'false'        reduce using rule 61
	'not'          reduce using rule 61
	'true'         reduce using rule 61
	L_integ        reduce using rule 61


State 45

	RelOp -> '==' .                                     (rule 64)

	'('            reduce using rule 64
	'E'            reduce using rule 64
	'N'            reduce using rule 64
	'S'            reduce using rule 64
	'W'            reduce using rule 64
	'false'        reduce using rule 64
	'not'          reduce using rule 64
	'true'         reduce using rule 64
	L_integ        reduce using rule 64


State 46

	RelOp -> '>' .                                      (rule 62)

	'('            reduce using rule 62
	'E'            reduce using rule 62
	'N'            reduce using rule 62
	'S'            reduce using rule 62
	'W'            reduce using rule 62
	'false'        reduce using rule 62
	'not'          reduce using rule 62
	'true'         reduce using rule 62
	L_integ        reduce using rule 62


State 47

	RelOp -> '>=' .                                     (rule 63)

	'('            reduce using rule 63
	'E'            reduce using rule 63
	'N'            reduce using rule 63
	'S'            reduce using rule 63
	'W'            reduce using rule 63
	'false'        reduce using rule 63
	'not'          reduce using rule 63
	'true'         reduce using rule 63
	L_integ        reduce using rule 63


State 48

	Expr1 -> Expr2 'and' . Expr1                        (rule 41)

	'('            shift, and enter state 18
	'E'            shift, and enter state 19
	'N'            shift, and enter state 20
	'S'            shift, and enter state 21
	'W'            shift, and enter state 22
	'false'        shift, and enter state 23
	'not'          shift, and enter state 24
	'true'         shift, and enter state 25
	L_integ        shift, and enter state 26

	Integer        goto state 9
	Expr6          goto state 10
	Expr5          goto state 11
	Expr2          goto state 12
	Expr1          goto state 49
	Expr3          goto state 15
	Expr4          goto state 16
	Hand           goto state 17

State 49

	Expr1 -> Expr2 'and' Expr1 .                        (rule 41)

	')'            reduce using rule 41
	'or'           reduce using rule 41
	%eof           reduce using rule 41


State 50

	Expr2 -> Expr2 RelOp Expr3 .                        (rule 39)

	'!='           reduce using rule 39
	')'            reduce using rule 39
	'<'            reduce using rule 39
	'<='           reduce using rule 39
	'=='           reduce using rule 39
	'>'            reduce using rule 39
	'>='           reduce using rule 39
	'and'          reduce using rule 39
	'or'           reduce using rule 39
	%eof           reduce using rule 39


State 51

	Expr -> Expr1 'or' Expr .                           (rule 43)

	')'            reduce using rule 43
	%eof           reduce using rule 43


State 52

	VarAttr -> Ident .                                  (rule 56)

	'!='           reduce using rule 56
	')'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'and'          reduce using rule 56
	'or'           reduce using rule 56
	%eof           reduce using rule 56


State 53

	Attr -> LenAttr .                                   (rule 57)

	'!='           reduce using rule 57
	')'            reduce using rule 57
	'<'            reduce using rule 57
	'<='           reduce using rule 57
	'=='           reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'and'          reduce using rule 57
	'or'           reduce using rule 57
	%eof           reduce using rule 57


State 54

	Attr -> SimpAttr .                                  (rule 58)

	'!='           reduce using rule 58
	')'            reduce using rule 58
	'<'            reduce using rule 58
	'<='           reduce using rule 58
	'=='           reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'and'          reduce using rule 58
	'or'           reduce using rule 58
	%eof           reduce using rule 58


State 55

	Attr -> VarAttr .                                   (rule 59)

	'!='           reduce using rule 59
	')'            reduce using rule 59
	'<'            reduce using rule 59
	'<='           reduce using rule 59
	'=='           reduce using rule 59
	'>'            reduce using rule 59
	'>='           reduce using rule 59
	'and'          reduce using rule 59
	'or'           reduce using rule 59
	%eof           reduce using rule 59


State 56

	Expr6 -> Hand '.' Attr .                            (rule 32)

	'!='           reduce using rule 32
	')'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'=='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'and'          reduce using rule 32
	'or'           reduce using rule 32
	%eof           reduce using rule 32


State 57

	LenAttr -> 'clubs' .                                (rule 54)

	'!='           reduce using rule 54
	')'            reduce using rule 54
	'<'            reduce using rule 54
	'<='           reduce using rule 54
	'=='           reduce using rule 54
	'>'            reduce using rule 54
	'>='           reduce using rule 54
	'and'          reduce using rule 54
	'or'           reduce using rule 54
	%eof           reduce using rule 54


State 58

	LenAttr -> 'diams' .                                (rule 53)

	'!='           reduce using rule 53
	')'            reduce using rule 53
	'<'            reduce using rule 53
	'<='           reduce using rule 53
	'=='           reduce using rule 53
	'>'            reduce using rule 53
	'>='           reduce using rule 53
	'and'          reduce using rule 53
	'or'           reduce using rule 53
	%eof           reduce using rule 53


State 59

	SimpAttr -> 'hcp' .                                 (rule 55)

	'!='           reduce using rule 55
	')'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'and'          reduce using rule 55
	'or'           reduce using rule 55
	%eof           reduce using rule 55


State 60

	LenAttr -> 'hearts' .                               (rule 52)

	'!='           reduce using rule 52
	')'            reduce using rule 52
	'<'            reduce using rule 52
	'<='           reduce using rule 52
	'=='           reduce using rule 52
	'>'            reduce using rule 52
	'>='           reduce using rule 52
	'and'          reduce using rule 52
	'or'           reduce using rule 52
	%eof           reduce using rule 52


State 61

	LenAttr -> 'spades' .                               (rule 51)

	'!='           reduce using rule 51
	')'            reduce using rule 51
	'<'            reduce using rule 51
	'<='           reduce using rule 51
	'=='           reduce using rule 51
	'>'            reduce using rule 51
	'>='           reduce using rule 51
	'and'          reduce using rule 51
	'or'           reduce using rule 51
	%eof           reduce using rule 51


State 62

	Expr6 -> '(' Expr ')' .                             (rule 36)

	'!='           reduce using rule 36
	')'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'=='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'and'          reduce using rule 36
	'or'           reduce using rule 36
	%eof           reduce using rule 36


State 63

	SuitInt -> Integer .                                (rule 21)

	')'            reduce using rule 21
	';'            reduce using rule 21
	']'            reduce using rule 21


State 64

	SuitCount -> SuitInt .                              (rule 22)

	';'            reduce using rule 22
	']'            reduce using rule 22


State 65

	ListSuitCount -> SuitCount .                        (rule 25)
	ListSuitCount -> SuitCount . ';' ListSuitCount      (rule 26)

	';'            shift, and enter state 78
	']'            reduce using rule 25


State 66

	ShapeOk -> '[' ListSuitCount . ']'                  (rule 19)

	']'            shift, and enter state 77


State 67

	SuitCount -> '(' . ListSuitInt ')'                  (rule 23)

	')'            reduce using rule 27
	L_integ        shift, and enter state 26

	Integer        goto state 63
	SuitInt        goto state 75
	ListSuitInt    goto state 76

State 68

	EvalDef -> Ident '=' 'Evaluator' '(' . ListEvalVal ')'    (rule 12)

	')'            reduce using rule 14
	L_integ        shift, and enter state 26

	Integer        goto state 72
	EvalVal        goto state 73
	ListEvalVal    goto state 74

State 69

	ShapeNeg -> '!' ShapeOk .                           (rule 20)

	'('            reduce using rule 20
	'+'            reduce using rule 20
	';'            reduce using rule 20
	'E'            reduce using rule 20
	'N'            reduce using rule 20
	'S'            reduce using rule 20
	'W'            reduce using rule 20
	'false'        reduce using rule 20
	'not'          reduce using rule 20
	'true'         reduce using rule 20
	L_integ        reduce using rule 20
	%eof           reduce using rule 20


State 70

	ShapeExpr -> ShapeExpr '+' . ShapeExpr              (rule 31)

	'!'            shift, and enter state 33
	'['            shift, and enter state 35

	Shape          goto state 29
	ShapeOk        goto state 30
	ShapeNeg       goto state 31
	ShapeExpr      goto state 71

State 71

	ShapeExpr -> ShapeExpr . '+' ShapeExpr              (rule 31)
	ShapeExpr -> ShapeExpr '+' ShapeExpr .              (rule 31)

	'('            reduce using rule 31
	'+'            shift, and enter state 70
			(reduce using rule 31)

	';'            reduce using rule 31
	'E'            reduce using rule 31
	'N'            reduce using rule 31
	'S'            reduce using rule 31
	'W'            reduce using rule 31
	'false'        reduce using rule 31
	'not'          reduce using rule 31
	'true'         reduce using rule 31
	L_integ        reduce using rule 31
	%eof           reduce using rule 31


State 72

	EvalVal -> Integer .                                (rule 13)

	')'            reduce using rule 13
	','            reduce using rule 13


State 73

	ListEvalVal -> EvalVal .                            (rule 15)
	ListEvalVal -> EvalVal . ',' ListEvalVal            (rule 16)

	')'            reduce using rule 15
	','            shift, and enter state 83


State 74

	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal . ')'    (rule 12)

	')'            shift, and enter state 82


State 75

	ListSuitInt -> SuitInt .                            (rule 28)
	ListSuitInt -> SuitInt . ';' ListSuitInt            (rule 29)

	')'            reduce using rule 28
	';'            shift, and enter state 81


State 76

	SuitCount -> '(' ListSuitInt . ')'                  (rule 23)

	')'            shift, and enter state 80


State 77

	ShapeOk -> '[' ListSuitCount ']' .                  (rule 19)

	'('            reduce using rule 19
	'+'            reduce using rule 19
	';'            reduce using rule 19
	'E'            reduce using rule 19
	'N'            reduce using rule 19
	'S'            reduce using rule 19
	'W'            reduce using rule 19
	'false'        reduce using rule 19
	'not'          reduce using rule 19
	'true'         reduce using rule 19
	L_integ        reduce using rule 19
	%eof           reduce using rule 19


State 78

	ListSuitCount -> SuitCount ';' . ListSuitCount      (rule 26)

	'('            shift, and enter state 67
	']'            reduce using rule 24
	L_integ        shift, and enter state 26

	Integer        goto state 63
	SuitInt        goto state 64
	SuitCount      goto state 65
	ListSuitCount  goto state 79

State 79

	ListSuitCount -> SuitCount ';' ListSuitCount .      (rule 26)

	']'            reduce using rule 26


State 80

	SuitCount -> '(' ListSuitInt ')' .                  (rule 23)

	';'            reduce using rule 23
	']'            reduce using rule 23


State 81

	ListSuitInt -> SuitInt ';' . ListSuitInt            (rule 29)

	')'            reduce using rule 27
	L_integ        shift, and enter state 26

	Integer        goto state 63
	SuitInt        goto state 75
	ListSuitInt    goto state 85

State 82

	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal ')' .    (rule 12)

	'('            reduce using rule 12
	';'            reduce using rule 12
	'E'            reduce using rule 12
	'N'            reduce using rule 12
	'S'            reduce using rule 12
	'W'            reduce using rule 12
	'false'        reduce using rule 12
	'not'          reduce using rule 12
	'true'         reduce using rule 12
	L_integ        reduce using rule 12
	%eof           reduce using rule 12


State 83

	ListEvalVal -> EvalVal ',' . ListEvalVal            (rule 16)

	')'            reduce using rule 14
	L_integ        shift, and enter state 26

	Integer        goto state 72
	EvalVal        goto state 73
	ListEvalVal    goto state 84

State 84

	ListEvalVal -> EvalVal ',' ListEvalVal .            (rule 16)

	')'            reduce using rule 16


State 85

	ListSuitInt -> SuitInt ';' ListSuitInt .            (rule 29)

	')'            reduce using rule 29


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 66
Number of terminals: 34
Number of non-terminals: 32
Number of states: 86
