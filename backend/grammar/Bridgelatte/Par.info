-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Bridgelatte/Par.y
-----------------------------------------------------------------------------


rule 3 is unused

terminal 'int' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	Integer -> L_integ                                 (1)
	Prog -> Expr                                       (2)
	Type -> 'int'                                      (3)
	Expr6 -> Hand '.' Attr                             (4)
	Expr6 -> Integer                                   (5)
	Expr6 -> 'true'                                    (6)
	Expr6 -> 'false'                                   (7)
	Expr6 -> '(' Expr ')'                              (8)
	Expr5 -> 'not' Expr6                               (9)
	Expr5 -> Expr6                                     (10)
	Expr2 -> Expr2 RelOp Expr3                         (11)
	Expr2 -> Expr3                                     (12)
	Expr1 -> Expr2 'and' Expr1                         (13)
	Expr1 -> Expr2                                     (14)
	Expr -> Expr1 'or' Expr                            (15)
	Expr -> Expr1                                      (16)
	Expr3 -> Expr4                                     (17)
	Expr4 -> Expr5                                     (18)
	Hand -> 'N'                                        (19)
	Hand -> 'E'                                        (20)
	Hand -> 'W'                                        (21)
	Hand -> 'S'                                        (22)
	LenAttr -> 'spades'                                (23)
	LenAttr -> 'hearts'                                (24)
	LenAttr -> 'diams'                                 (25)
	LenAttr -> 'clubs'                                 (26)
	SimpAttr -> 'hcp'                                  (27)
	Attr -> LenAttr                                    (28)
	Attr -> SimpAttr                                   (29)
	RelOp -> '<'                                       (30)
	RelOp -> '<='                                      (31)
	RelOp -> '>'                                       (32)
	RelOp -> '>='                                      (33)
	RelOp -> '=='                                      (34)
	RelOp -> '!='                                      (35)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!='           { PT _ (TS _ 1) }
	'('            { PT _ (TS _ 2) }
	')'            { PT _ (TS _ 3) }
	'.'            { PT _ (TS _ 4) }
	'<'            { PT _ (TS _ 5) }
	'<='           { PT _ (TS _ 6) }
	'=='           { PT _ (TS _ 7) }
	'>'            { PT _ (TS _ 8) }
	'>='           { PT _ (TS _ 9) }
	'E'            { PT _ (TS _ 10) }
	'N'            { PT _ (TS _ 11) }
	'S'            { PT _ (TS _ 12) }
	'W'            { PT _ (TS _ 13) }
	'and'          { PT _ (TS _ 14) }
	'clubs'        { PT _ (TS _ 15) }
	'diams'        { PT _ (TS _ 16) }
	'false'        { PT _ (TS _ 17) }
	'hcp'          { PT _ (TS _ 18) }
	'hearts'       { PT _ (TS _ 19) }
	'int'          { PT _ (TS _ 20) }
	'not'          { PT _ (TS _ 21) }
	'or'           { PT _ (TS _ 22) }
	'spades'       { PT _ (TS _ 23) }
	'true'         { PT _ (TS _ 24) }
	L_integ        { PT _ (TI $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	Integer         rule  1
	Prog            rule  2
	Type            rule  3
	Expr6           rules 4, 5, 6, 7, 8
	Expr5           rules 9, 10
	Expr2           rules 11, 12
	Expr1           rules 13, 14
	Expr            rules 15, 16
	Expr3           rule  17
	Expr4           rule  18
	Hand            rules 19, 20, 21, 22
	LenAttr         rules 23, 24, 25, 26
	SimpAttr        rule  27
	Attr            rules 28, 29
	RelOp           rules 30, 31, 32, 33, 34, 35

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'not'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Prog           goto state 4
	Expr6          goto state 5
	Expr5          goto state 6
	Expr2          goto state 7
	Expr1          goto state 8
	Expr           goto state 9
	Expr3          goto state 10
	Expr4          goto state 11
	Hand           goto state 12

State 1


	L_integ        shift, and enter state 2


State 2

	Integer -> L_integ .                                (rule 1)

	'!='           reduce using rule 1
	')'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'or'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	Expr6 -> Integer .                                  (rule 5)

	'!='           reduce using rule 5
	')'            reduce using rule 5
	'<'            reduce using rule 5
	'<='           reduce using rule 5
	'=='           reduce using rule 5
	'>'            reduce using rule 5
	'>='           reduce using rule 5
	'and'          reduce using rule 5
	'or'           reduce using rule 5
	%eof           reduce using rule 5


State 4

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 5

	Expr5 -> Expr6 .                                    (rule 10)

	'!='           reduce using rule 10
	')'            reduce using rule 10
	'<'            reduce using rule 10
	'<='           reduce using rule 10
	'=='           reduce using rule 10
	'>'            reduce using rule 10
	'>='           reduce using rule 10
	'and'          reduce using rule 10
	'or'           reduce using rule 10
	%eof           reduce using rule 10


State 6

	Expr4 -> Expr5 .                                    (rule 18)

	'!='           reduce using rule 18
	')'            reduce using rule 18
	'<'            reduce using rule 18
	'<='           reduce using rule 18
	'=='           reduce using rule 18
	'>'            reduce using rule 18
	'>='           reduce using rule 18
	'and'          reduce using rule 18
	'or'           reduce using rule 18
	%eof           reduce using rule 18


State 7

	Expr2 -> Expr2 . RelOp Expr3                        (rule 11)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 13)
	Expr1 -> Expr2 .                                    (rule 14)

	'!='           shift, and enter state 26
	')'            reduce using rule 14
	'<'            shift, and enter state 27
	'<='           shift, and enter state 28
	'=='           shift, and enter state 29
	'>'            shift, and enter state 30
	'>='           shift, and enter state 31
	'and'          shift, and enter state 32
	'or'           reduce using rule 14
	%eof           reduce using rule 14

	RelOp          goto state 25

State 8

	Expr -> Expr1 . 'or' Expr                           (rule 15)
	Expr -> Expr1 .                                     (rule 16)

	')'            reduce using rule 16
	'or'           shift, and enter state 24
	%eof           reduce using rule 16


State 9

	Prog -> Expr .                                      (rule 2)

	%eof           reduce using rule 2


State 10

	Expr2 -> Expr3 .                                    (rule 12)

	'!='           reduce using rule 12
	')'            reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'=='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'and'          reduce using rule 12
	'or'           reduce using rule 12
	%eof           reduce using rule 12


State 11

	Expr3 -> Expr4 .                                    (rule 17)

	'!='           reduce using rule 17
	')'            reduce using rule 17
	'<'            reduce using rule 17
	'<='           reduce using rule 17
	'=='           reduce using rule 17
	'>'            reduce using rule 17
	'>='           reduce using rule 17
	'and'          reduce using rule 17
	'or'           reduce using rule 17
	%eof           reduce using rule 17


State 12

	Expr6 -> Hand . '.' Attr                            (rule 4)

	'.'            shift, and enter state 23


State 13

	Expr6 -> '(' . Expr ')'                             (rule 8)

	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'not'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Expr6          goto state 5
	Expr5          goto state 6
	Expr2          goto state 7
	Expr1          goto state 8
	Expr           goto state 22
	Expr3          goto state 10
	Expr4          goto state 11
	Hand           goto state 12

State 14

	Hand -> 'E' .                                       (rule 20)

	'.'            reduce using rule 20


State 15

	Hand -> 'N' .                                       (rule 19)

	'.'            reduce using rule 19


State 16

	Hand -> 'S' .                                       (rule 22)

	'.'            reduce using rule 22


State 17

	Hand -> 'W' .                                       (rule 21)

	'.'            reduce using rule 21


State 18

	Expr6 -> 'false' .                                  (rule 7)

	'!='           reduce using rule 7
	')'            reduce using rule 7
	'<'            reduce using rule 7
	'<='           reduce using rule 7
	'=='           reduce using rule 7
	'>'            reduce using rule 7
	'>='           reduce using rule 7
	'and'          reduce using rule 7
	'or'           reduce using rule 7
	%eof           reduce using rule 7


State 19

	Expr5 -> 'not' . Expr6                              (rule 9)

	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Expr6          goto state 21
	Hand           goto state 12

State 20

	Expr6 -> 'true' .                                   (rule 6)

	'!='           reduce using rule 6
	')'            reduce using rule 6
	'<'            reduce using rule 6
	'<='           reduce using rule 6
	'=='           reduce using rule 6
	'>'            reduce using rule 6
	'>='           reduce using rule 6
	'and'          reduce using rule 6
	'or'           reduce using rule 6
	%eof           reduce using rule 6


State 21

	Expr5 -> 'not' Expr6 .                              (rule 9)

	'!='           reduce using rule 9
	')'            reduce using rule 9
	'<'            reduce using rule 9
	'<='           reduce using rule 9
	'=='           reduce using rule 9
	'>'            reduce using rule 9
	'>='           reduce using rule 9
	'and'          reduce using rule 9
	'or'           reduce using rule 9
	%eof           reduce using rule 9


State 22

	Expr6 -> '(' Expr . ')'                             (rule 8)

	')'            shift, and enter state 44


State 23

	Expr6 -> Hand '.' . Attr                            (rule 4)

	'clubs'        shift, and enter state 39
	'diams'        shift, and enter state 40
	'hcp'          shift, and enter state 41
	'hearts'       shift, and enter state 42
	'spades'       shift, and enter state 43

	LenAttr        goto state 36
	SimpAttr       goto state 37
	Attr           goto state 38

State 24

	Expr -> Expr1 'or' . Expr                           (rule 15)

	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'not'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Expr6          goto state 5
	Expr5          goto state 6
	Expr2          goto state 7
	Expr1          goto state 8
	Expr           goto state 35
	Expr3          goto state 10
	Expr4          goto state 11
	Hand           goto state 12

State 25

	Expr2 -> Expr2 RelOp . Expr3                        (rule 11)

	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'not'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Expr6          goto state 5
	Expr5          goto state 6
	Expr3          goto state 34
	Expr4          goto state 11
	Hand           goto state 12

State 26

	RelOp -> '!=' .                                     (rule 35)

	'('            reduce using rule 35
	'E'            reduce using rule 35
	'N'            reduce using rule 35
	'S'            reduce using rule 35
	'W'            reduce using rule 35
	'false'        reduce using rule 35
	'not'          reduce using rule 35
	'true'         reduce using rule 35
	L_integ        reduce using rule 35


State 27

	RelOp -> '<' .                                      (rule 30)

	'('            reduce using rule 30
	'E'            reduce using rule 30
	'N'            reduce using rule 30
	'S'            reduce using rule 30
	'W'            reduce using rule 30
	'false'        reduce using rule 30
	'not'          reduce using rule 30
	'true'         reduce using rule 30
	L_integ        reduce using rule 30


State 28

	RelOp -> '<=' .                                     (rule 31)

	'('            reduce using rule 31
	'E'            reduce using rule 31
	'N'            reduce using rule 31
	'S'            reduce using rule 31
	'W'            reduce using rule 31
	'false'        reduce using rule 31
	'not'          reduce using rule 31
	'true'         reduce using rule 31
	L_integ        reduce using rule 31


State 29

	RelOp -> '==' .                                     (rule 34)

	'('            reduce using rule 34
	'E'            reduce using rule 34
	'N'            reduce using rule 34
	'S'            reduce using rule 34
	'W'            reduce using rule 34
	'false'        reduce using rule 34
	'not'          reduce using rule 34
	'true'         reduce using rule 34
	L_integ        reduce using rule 34


State 30

	RelOp -> '>' .                                      (rule 32)

	'('            reduce using rule 32
	'E'            reduce using rule 32
	'N'            reduce using rule 32
	'S'            reduce using rule 32
	'W'            reduce using rule 32
	'false'        reduce using rule 32
	'not'          reduce using rule 32
	'true'         reduce using rule 32
	L_integ        reduce using rule 32


State 31

	RelOp -> '>=' .                                     (rule 33)

	'('            reduce using rule 33
	'E'            reduce using rule 33
	'N'            reduce using rule 33
	'S'            reduce using rule 33
	'W'            reduce using rule 33
	'false'        reduce using rule 33
	'not'          reduce using rule 33
	'true'         reduce using rule 33
	L_integ        reduce using rule 33


State 32

	Expr1 -> Expr2 'and' . Expr1                        (rule 13)

	'('            shift, and enter state 13
	'E'            shift, and enter state 14
	'N'            shift, and enter state 15
	'S'            shift, and enter state 16
	'W'            shift, and enter state 17
	'false'        shift, and enter state 18
	'not'          shift, and enter state 19
	'true'         shift, and enter state 20
	L_integ        shift, and enter state 2

	Integer        goto state 3
	Expr6          goto state 5
	Expr5          goto state 6
	Expr2          goto state 7
	Expr1          goto state 33
	Expr3          goto state 10
	Expr4          goto state 11
	Hand           goto state 12

State 33

	Expr1 -> Expr2 'and' Expr1 .                        (rule 13)

	')'            reduce using rule 13
	'or'           reduce using rule 13
	%eof           reduce using rule 13


State 34

	Expr2 -> Expr2 RelOp Expr3 .                        (rule 11)

	'!='           reduce using rule 11
	')'            reduce using rule 11
	'<'            reduce using rule 11
	'<='           reduce using rule 11
	'=='           reduce using rule 11
	'>'            reduce using rule 11
	'>='           reduce using rule 11
	'and'          reduce using rule 11
	'or'           reduce using rule 11
	%eof           reduce using rule 11


State 35

	Expr -> Expr1 'or' Expr .                           (rule 15)

	')'            reduce using rule 15
	%eof           reduce using rule 15


State 36

	Attr -> LenAttr .                                   (rule 28)

	'!='           reduce using rule 28
	')'            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'=='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'and'          reduce using rule 28
	'or'           reduce using rule 28
	%eof           reduce using rule 28


State 37

	Attr -> SimpAttr .                                  (rule 29)

	'!='           reduce using rule 29
	')'            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'=='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'and'          reduce using rule 29
	'or'           reduce using rule 29
	%eof           reduce using rule 29


State 38

	Expr6 -> Hand '.' Attr .                            (rule 4)

	'!='           reduce using rule 4
	')'            reduce using rule 4
	'<'            reduce using rule 4
	'<='           reduce using rule 4
	'=='           reduce using rule 4
	'>'            reduce using rule 4
	'>='           reduce using rule 4
	'and'          reduce using rule 4
	'or'           reduce using rule 4
	%eof           reduce using rule 4


State 39

	LenAttr -> 'clubs' .                                (rule 26)

	'!='           reduce using rule 26
	')'            reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'=='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'and'          reduce using rule 26
	'or'           reduce using rule 26
	%eof           reduce using rule 26


State 40

	LenAttr -> 'diams' .                                (rule 25)

	'!='           reduce using rule 25
	')'            reduce using rule 25
	'<'            reduce using rule 25
	'<='           reduce using rule 25
	'=='           reduce using rule 25
	'>'            reduce using rule 25
	'>='           reduce using rule 25
	'and'          reduce using rule 25
	'or'           reduce using rule 25
	%eof           reduce using rule 25


State 41

	SimpAttr -> 'hcp' .                                 (rule 27)

	'!='           reduce using rule 27
	')'            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'=='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'and'          reduce using rule 27
	'or'           reduce using rule 27
	%eof           reduce using rule 27


State 42

	LenAttr -> 'hearts' .                               (rule 24)

	'!='           reduce using rule 24
	')'            reduce using rule 24
	'<'            reduce using rule 24
	'<='           reduce using rule 24
	'=='           reduce using rule 24
	'>'            reduce using rule 24
	'>='           reduce using rule 24
	'and'          reduce using rule 24
	'or'           reduce using rule 24
	%eof           reduce using rule 24


State 43

	LenAttr -> 'spades' .                               (rule 23)

	'!='           reduce using rule 23
	')'            reduce using rule 23
	'<'            reduce using rule 23
	'<='           reduce using rule 23
	'=='           reduce using rule 23
	'>'            reduce using rule 23
	'>='           reduce using rule 23
	'and'          reduce using rule 23
	'or'           reduce using rule 23
	%eof           reduce using rule 23


State 44

	Expr6 -> '(' Expr ')' .                             (rule 8)

	'!='           reduce using rule 8
	')'            reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'=='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'and'          reduce using rule 8
	'or'           reduce using rule 8
	%eof           reduce using rule 8


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 36
Number of terminals: 25
Number of non-terminals: 16
Number of states: 45
