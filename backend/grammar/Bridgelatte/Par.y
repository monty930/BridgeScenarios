-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module Bridgelatte.Par
  ( happyError
  , myLexer
  , pProg
  ) where

import Prelude

import qualified Bridgelatte.Abs
import Bridgelatte.Lex

}

%name pProg Prog
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!='     { PT _ (TS _ 1)  }
  '('      { PT _ (TS _ 2)  }
  ')'      { PT _ (TS _ 3)  }
  '.'      { PT _ (TS _ 4)  }
  '<'      { PT _ (TS _ 5)  }
  '<='     { PT _ (TS _ 6)  }
  '=='     { PT _ (TS _ 7)  }
  '>'      { PT _ (TS _ 8)  }
  '>='     { PT _ (TS _ 9)  }
  'E'      { PT _ (TS _ 10) }
  'N'      { PT _ (TS _ 11) }
  'S'      { PT _ (TS _ 12) }
  'W'      { PT _ (TS _ 13) }
  'and'    { PT _ (TS _ 14) }
  'clubs'  { PT _ (TS _ 15) }
  'diams'  { PT _ (TS _ 16) }
  'false'  { PT _ (TS _ 17) }
  'hcp'    { PT _ (TS _ 18) }
  'hearts' { PT _ (TS _ 19) }
  'int'    { PT _ (TS _ 20) }
  'not'    { PT _ (TS _ 21) }
  'or'     { PT _ (TS _ 22) }
  'spades' { PT _ (TS _ 23) }
  'true'   { PT _ (TS _ 24) }
  L_integ  { PT _ (TI $$)   }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Prog :: { Bridgelatte.Abs.Prog }
Prog : Expr { Bridgelatte.Abs.Program $1 }

Type :: { Bridgelatte.Abs.Type }
Type : 'int' { Bridgelatte.Abs.Int }

Expr6 :: { Bridgelatte.Abs.Expr }
Expr6
  : Hand '.' Attr { Bridgelatte.Abs.EVar $1 $3 }
  | Integer { Bridgelatte.Abs.ELitInt $1 }
  | 'true' { Bridgelatte.Abs.ELitTrue }
  | 'false' { Bridgelatte.Abs.ELitFalse }
  | '(' Expr ')' { $2 }

Expr5 :: { Bridgelatte.Abs.Expr }
Expr5 : 'not' Expr6 { Bridgelatte.Abs.Not $2 } | Expr6 { $1 }

Expr2 :: { Bridgelatte.Abs.Expr }
Expr2
  : Expr2 RelOp Expr3 { Bridgelatte.Abs.ERel $1 $2 $3 }
  | Expr3 { $1 }

Expr1 :: { Bridgelatte.Abs.Expr }
Expr1
  : Expr2 'and' Expr1 { Bridgelatte.Abs.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { Bridgelatte.Abs.Expr }
Expr : Expr1 'or' Expr { Bridgelatte.Abs.EOr $1 $3 } | Expr1 { $1 }

Expr3 :: { Bridgelatte.Abs.Expr }
Expr3 : Expr4 { $1 }

Expr4 :: { Bridgelatte.Abs.Expr }
Expr4 : Expr5 { $1 }

Hand :: { Bridgelatte.Abs.Hand }
Hand
  : 'N' { Bridgelatte.Abs.HandN }
  | 'E' { Bridgelatte.Abs.HandE }
  | 'W' { Bridgelatte.Abs.HandW }
  | 'S' { Bridgelatte.Abs.HandS }

LenAttr :: { Bridgelatte.Abs.LenAttr }
LenAttr
  : 'spades' { Bridgelatte.Abs.AttrSpades }
  | 'hearts' { Bridgelatte.Abs.AttrHearts }
  | 'diams' { Bridgelatte.Abs.AttrDiams }
  | 'clubs' { Bridgelatte.Abs.AttrClubs }

SimpAttr :: { Bridgelatte.Abs.SimpAttr }
SimpAttr : 'hcp' { Bridgelatte.Abs.AttrHcp }

Attr :: { Bridgelatte.Abs.Attr }
Attr
  : LenAttr { Bridgelatte.Abs.LenAttr $1 }
  | SimpAttr { Bridgelatte.Abs.SimpAttr $1 }

RelOp :: { Bridgelatte.Abs.RelOp }
RelOp
  : '<' { Bridgelatte.Abs.LTH }
  | '<=' { Bridgelatte.Abs.LE }
  | '>' { Bridgelatte.Abs.GTH }
  | '>=' { Bridgelatte.Abs.GE }
  | '==' { Bridgelatte.Abs.EQU }
  | '!=' { Bridgelatte.Abs.NE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

