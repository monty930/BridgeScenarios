<link rel="stylesheet" href="~/css/leftside/leftsideview.css"/>

@model BridgeScenarios.Models.ViewModels.IndexViewModel

<div class="editor-container">
        <div class="editor">
            <div class="lines" id="lines"></div>
            <textarea id="code" spellcheck="false"></textarea>
        </div>
    </div>

@* <div class="container-for-input"> *@
@*     <div class="left-container"> *@
@*         <div class="left-container-content"> *@
@*             <div id="input-dynamic" class="left-container-inner-content"> *@
@*                 @{ *@
@*                     await Html.RenderPartialAsync("LeftSide/InputView", Model); *@
@*                 } *@
@*             </div> *@
@*             <div id="lightbulb-dynamic" class="left-container-inner-content hidden"> *@
@*                 @{ *@
@*                     await Html.RenderPartialAsync("LeftSide/Lightbulb", Model); *@
@*                 } *@
@*             </div> *@
@*             <div id="settings-dynamic" class="left-container-inner-content hidden"> *@
@*                 @{ *@
@*                     await Html.RenderPartialAsync("LeftSide/Settings", Model); *@
@*                 } *@
@*             </div> *@
@*         </div> *@
@*         <div class="left-container-switches"> *@
@*             @{ *@
@*                 await Html.RenderPartialAsync("LeftSide/TabSwitches", Model); *@
@*             } *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const code = document.getElementById('code');
        const lines = document.getElementById('lines');
        const editorContainer = document.querySelector('.editor-container');
        const lineHeight = 20; // The line height in pixels
        const editorContainerHeight = editorContainer.offsetHeight;
    
        function updateLines() {
            const activeLineCount = code.value.split('\n').length;
            const visibleLines = Math.floor(editorContainerHeight / lineHeight);
            lines.innerHTML = ''; // Reset line numbers
            console.log("visible: " + visibleLines);
    
            // Generate active line numbers
            for (let i = 1; i <= activeLineCount; i++) {
                const lineSpan = document.createElement('span');
                lineSpan.textContent = i;
                lineSpan.className = 'active-line'; // Use active line style
                lines.appendChild(lineSpan);
                lines.appendChild(document.createElement('br'));
            }
    
            // Fill in inactive line numbers up to the visible limit
            for (let i = activeLineCount + 1; i <= visibleLines; i++) {
                const lineSpan = document.createElement('span');
                lineSpan.textContent = i;
                lineSpan.className = 'inactive-line'; // Use inactive line style
                lines.appendChild(lineSpan);
                lines.appendChild(document.createElement('br'));
            }
    
            // Adjust scrolling behavior based on content
            editorContainer.style.overflowY = activeLineCount > visibleLines ? 'scroll' : 'hidden';
        }
    
        code.addEventListener('input', updateLines);
        updateLines(); // Initial call to fill the lines and set overflow
    });


</script>