@page
@model BridgeScenarios.Pages.IndexModel
@{
    ViewData["Title"] = "Home page";
}

<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="~/css/log.css" />
</head>


<div class="page-layout">
    <div class="left-panel">
        <div class="container-for-input">
            <div class="left-container">
                <div class="input-section">
                    <h4>Enter constraints:</h4>
                    <form id=gen_sc method="post">
                        <div class="editor-container">
                            <div class="line-numbers" id="lineNumbers"></div>
                            <textarea 
                                spellcheck="false" 
                                asp-for="TextInput" 
                                placeholder="See README for constraints examples."
                                id="codeInput" 
                                oninput="updateLineNumbers()">
                            </textarea>
                        </div>
                    </form>
                </div>
                <div class="left-switches">
                    <div></div>
                    <div class="button-cont">
                        <button class="button-save">
                            <img id="tabs-img" src="~/assets/save.png"/> 
                        </button>
                    </div>
                    <div class="button-cont">
                        <button class="button-settings">
                            <img id="tabs-img" src="~/assets/settings.png"/> 
                        </button>
                    </div>
                    <div class="button-cont">
                        <button class="button-readme">
                            <img id="tabs-img" src="~/assets/lightbulb.png"/> 
                        </button>
                    </div>
                </div>
            </div>
            <div></div>
        </div>
    </div>
    
    <div class="right-panel" id="dynamic-content">
        <div class="grid-rows">
            <div class="@("row-n" + (Model.HandSuits != null ? " has-handsuits" : " no-handsuits"))">
                <div>
                    <button type="submit" form="gen_sc" id="playButton">
                        <img id="arrow-img" src="~/assets/arrow-white.png"/>
                    </button>
                </div>
                <div class="hands">
                    @if (Model.HandSuits != null){
                        <div class="suit">
                            <img id="suit-img" src="~/assets/spade.png"/>
                            @Html.Raw(Model.HandSuits[0])<br>
                        </div>
                        <div class="suit">
                            <img id="suit-img" src="~/assets/heart.png"/>
                            @Html.Raw(Model.HandSuits[1])<br>
                        </div>
                        <div class="suit">
                            <img id="suit-img" src="~/assets/diamond.png"/> 
                            <div> </div>
                            @Html.Raw(Model.HandSuits[2])<br>
                        </div>
                        <div class="suit">
                            <img id="suit-img" src="~/assets/club.png"/>
                            @Html.Raw(Model.HandSuits[3])<br>
                        </div>
                    } else {
                        <div></div>
                        <div></div>
                        <div></div>
                        <div>
                            Press
                            <img id="play-img" src="~/assets/arrow-white.png"/> 
                            to generate an example.
                            </div>
                    }
                </div>
                <div>
                    @if (Model.error_input) {
                        <button 
                            class="compile-error-button visible" 
                            id="errorButton"
                            >
                            <span class="error-font">ERROR</span><br>
                            <span class="logs-font">see logs</span>
                        </button>
                    }
                    @if (Model.Tries != null) {
                        if (!Model.error_input) {
                            <div># of tries: @Model.Tries</div>
                        }
                    }
                </div>
            </div>
            <div>
                <div class="row-mid">
                    <div class="aligning-cells">
                        <div></div>
                        <div class="hands">
                            @if (Model.HandSuits != null){
                                <div class="suit">
                                    <img id="suit-img" src="~/assets/spade.png"/>
                                    @Html.Raw(Model.HandSuits[4])<br>
                                </div>
                                <div class="suit">
                                    <img id="suit-img" src="~/assets/heart.png"/>
                                    @Html.Raw(Model.HandSuits[5])<br>
                                </div>
                                <div class="suit">
                                    <img id="suit-img" src="~/assets/diamond.png"/> 
                                    <div> </div>
                                    @Html.Raw(Model.HandSuits[6])<br>
                                </div>
                                <div class="suit">
                                    <img id="suit-img" src="~/assets/club.png"/>
                                    @Html.Raw(Model.HandSuits[7])<br>
                                </div>
                            }
                        </div>
                    </div>
                    <div class = "grid-snwe">
                        <div></div><div>N</div><div></div>
                        <div>W</div>
                        <div>
                            <div id="spinner" style="display:none;">
                                <div class="loader">
                                    <img
                                        id="loading-img"
                                        src="~/assets/loading-simp.png"
                                        alt="Randomly Oriented Image"
                                        />
                                </div>
                            </div>
                        </div>
                        <div>E</div>
                        <div></div><div>S</div><div></div>
                    </div>
                    <div class="hands">
                        @if (Model.HandSuits != null){
                            <div class="suit">
                                <img id="suit-img" src="~/assets/spade.png"/>
                                @Html.Raw(Model.HandSuits[12])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/heart.png"/>
                                @Html.Raw(Model.HandSuits[13])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/diamond.png"/> 
                                <div> </div>
                                @Html.Raw(Model.HandSuits[14])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/club.png"/>
                                @Html.Raw(Model.HandSuits[15])<br>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div>
                <div class="row-s">
                    <div></div>
                    <div class="hands">
                        @if (Model.HandSuits != null){
                            <div class="suit">
                                <img id="suit-img" src="~/assets/spade.png"/>
                                @Html.Raw(Model.HandSuits[8])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/heart.png"/>
                                @Html.Raw(Model.HandSuits[9])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/diamond.png"/> 
                                <div> </div>
                                @Html.Raw(Model.HandSuits[10])<br>
                            </div>
                            <div class="suit">
                                <img id="suit-img" src="~/assets/club.png"/>
                                @Html.Raw(Model.HandSuits[11])<br>
                            </div>
                        }
                    </div>
                    <div></div>
                </div>
            </div>
        </div>
    </div>
    
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    var form = document.getElementById('gen_sc');
    var spinner = document.getElementById('spinner');
    
    form.addEventListener('submit', function() {
        spinner.style.display = 'block';
        document.getElementById('playButton').disabled = true;
    });

    var dynamicContent = document.getElementById('dynamic-content');
    var originalContent = dynamicContent.innerHTML; // Store the original content

    function addErrorButtonListener() {
        var errorButton = document.getElementById('errorButton');
        if (errorButton) {
            errorButton.addEventListener('click', function() {
                // The new content
                dynamicContent.innerHTML = `
                    <div class="log-view">
                        <div class="grid-log-columns">
                            <div class="logs-output">
                                @if (Model.ScriptOutput != null) {
                                    <pre>@Model.ScriptOutput</pre>
                                }
                            </div>
                            <div>
                                <button class="compile-error-button back" id="backButton">BACK</button>
                            </div>
                        </div>
                        
                    </div>
                `;
                addBackButtonListener();
                return false;
            });
        }
    }

    function addBackButtonListener() {
        var backButton = document.getElementById('backButton');
        if (backButton) {
            backButton.addEventListener('click', function() {
                // Restore the original content
                dynamicContent.innerHTML = originalContent;
                addErrorButtonListener();
                return false;
            });
        }
    }

    addErrorButtonListener();

    updateLineNumbers();
  
    // Check if a saved scroll position exists and restore it
    var savedScrollTop = localStorage.getItem('textareaScrollTop');
    if (savedScrollTop !== null) {
        document.getElementById('codeInput').scrollTop = parseInt(savedScrollTop, 10);
    }
});

window.onload = function() {
  var image = document.getElementById('loading-img');
  var randomAngle = Math.floor(Math.random() * 360); // Generate a random angle between 0 and 359
  image.style.transform = 'rotate(' + randomAngle + 'deg)'; // Rotate the image
};

function updateLineNumbers() {
  const textarea = document.getElementById('codeInput');
  const lineNumbers = document.getElementById('lineNumbers');
  const lineCount = textarea.value.split('\n').length;

  // Get the computed line height of the textarea for accurate calculations
  const computedStyle = window.getComputedStyle(textarea);
  const lineHeight = parseInt(computedStyle.lineHeight, 10); // Convert the line-height value to an integer

  // Calculate visible lines based on textarea height and the computed line height
  const visibleLines = Math.floor(textarea.clientHeight / lineHeight);
  
  // Ensure we cover all lines that have content or are within the initial visible area
  const totalLines = Math.max(lineCount, visibleLines);

  let numbers = '';
  for (let i = 1; i <= totalLines; i++) {
    // Apply "used-line" class to lines with content, and "unused-line" to empty but visible lines
    numbers += i <= lineCount ? `<span class="used-line">${i}</span>\n` : `<span class="unused-line">${i}</span>\n`;
  }

  lineNumbers.innerHTML = numbers;
}

document.getElementById('codeInput').addEventListener('input', updateLineNumbers);
document.getElementById('codeInput').addEventListener('scroll', function() {
  document.getElementById('lineNumbers').scrollTop = this.scrollTop;
});

window.addEventListener('resize', updateLineNumbers);

window.addEventListener('beforeunload', function() {
  // Save the current scroll position of the textarea to localStorage
  localStorage.setItem('textareaScrollTop', document.getElementById('codeInput').scrollTop);
});

</script>
