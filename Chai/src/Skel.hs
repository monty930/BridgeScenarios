-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Abs.Ident -> Result
transIdent x = case x of
  Abs.Ident string -> failure x

transProg :: Show a => Abs.Prog' a -> Result
transProg x = case x of
  Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Abs.TopDef' a -> Result
transTopDef x = case x of
  Abs.TopDefPredeal _ handpredeals -> failure x
  Abs.Final _ expr -> failure x
  Abs.TopDefShape _ shapedef -> failure x
  Abs.TopDefEval _ ident evalvals -> failure x
  Abs.TopDefHold _ ident holdingexpr -> failure x

transHandPredeal :: Show a => Abs.HandPredeal' a -> Result
transHandPredeal x = case x of
  Abs.HandPredeal _ hand handfeature -> failure x

transHandFeature :: Show a => Abs.HandFeature' a -> Result
transHandFeature x = case x of
  Abs.HandLit _ string -> failure x
  Abs.SmartStackShape _ ident -> failure x
  Abs.SmartStackFunc _ ident1 ident2 integer -> failure x
  Abs.SmartStackFull _ ident1 ident2 value -> failure x

transValue :: Show a => Abs.Value' a -> Result
transValue x = case x of
  Abs.ValueRange _ integer1 integer2 -> failure x

transShapeDef :: Show a => Abs.ShapeDef' a -> Result
transShapeDef x = case x of
  Abs.ShapeCond _ ident shapeexpr -> failure x
  Abs.ShapeLit _ ident shapes -> failure x

transEvalVal :: Show a => Abs.EvalVal' a -> Result
transEvalVal x = case x of
  Abs.EvalVal _ integer -> failure x

transShape :: Show a => Abs.Shape' a -> Result
transShape x = case x of
  Abs.ShapeOk _ shapeok -> failure x
  Abs.ShapeNeg _ shapeneg -> failure x

transShapeOk :: Show a => Abs.ShapeOk' a -> Result
transShapeOk x = case x of
  Abs.OneShapeOk _ suitcounts -> failure x

transShapeNeg :: Show a => Abs.ShapeNeg' a -> Result
transShapeNeg x = case x of
  Abs.OneShapeNeg _ shapeok -> failure x

transSuitCount :: Show a => Abs.SuitCount' a -> Result
transSuitCount x = case x of
  Abs.SuitIntCount _ suitint -> failure x
  Abs.SuitChoice _ suitints -> failure x

transSuitInt :: Show a => Abs.SuitInt' a -> Result
transSuitInt x = case x of
  Abs.SuitInt _ integer -> failure x

transType :: Show a => Abs.Type' a -> Result
transType x = case x of
  Abs.Int _ -> failure x

transExpr :: Show a => Abs.Expr' a -> Result
transExpr x = case x of
  Abs.HandAttr _ hand ident -> failure x
  Abs.ELitInt _ integer -> failure x
  Abs.ELitTrue _ -> failure x
  Abs.ELitFalse _ -> failure x
  Abs.ENot _ expr -> failure x
  Abs.ERel _ expr1 relop expr2 -> failure x
  Abs.EAnd _ expr1 expr2 -> failure x
  Abs.EOr _ expr1 expr2 -> failure x

transHand :: Show a => Abs.Hand' a -> Result
transHand x = case x of
  Abs.HandN _ -> failure x
  Abs.HandE _ -> failure x
  Abs.HandW _ -> failure x
  Abs.HandS _ -> failure x

transShapeExpr :: Show a => Abs.ShapeExpr' a -> Result
transShapeExpr x = case x of
  Abs.ESuit _ suitlit -> failure x
  Abs.EShapeInt _ integer -> failure x
  Abs.ENotShape _ shapeexpr -> failure x
  Abs.ERelShape _ shapeexpr1 relop shapeexpr2 -> failure x
  Abs.EAndShape _ shapeexpr1 shapeexpr2 -> failure x
  Abs.EOrShape _ shapeexpr1 shapeexpr2 -> failure x

transSuitLit :: Show a => Abs.SuitLit' a -> Result
transSuitLit x = case x of
  Abs.SuitLitS _ -> failure x
  Abs.SuitLitH _ -> failure x
  Abs.SuitLitD _ -> failure x
  Abs.SuitLitC _ -> failure x

transHoldingExpr :: Show a => Abs.HoldingExpr' a -> Result
transHoldingExpr x = case x of
  Abs.HExprLen _ -> failure x
  Abs.HExprInt _ integer -> failure x
  Abs.HExprCard _ card -> failure x
  Abs.HNotExpr _ holdingexpr -> failure x
  Abs.HRelExpr _ holdingexpr1 relop holdingexpr2 -> failure x
  Abs.HAndExpr _ holdingexpr1 holdingexpr2 -> failure x
  Abs.HOrExpr _ holdingexpr1 holdingexpr2 -> failure x

transCard :: Show a => Abs.Card' a -> Result
transCard x = case x of
  Abs.CardA _ -> failure x
  Abs.CardK _ -> failure x
  Abs.CardQ _ -> failure x
  Abs.CardJ _ -> failure x
  Abs.CardT _ -> failure x
  Abs.Card9 _ -> failure x
  Abs.Card8 _ -> failure x
  Abs.Card7 _ -> failure x
  Abs.Card6 _ -> failure x
  Abs.Card5 _ -> failure x
  Abs.Card4 _ -> failure x
  Abs.Card3 _ -> failure x
  Abs.Card2 _ -> failure x

transRelOp :: Show a => Abs.RelOp' a -> Result
transRelOp x = case x of
  Abs.LTH _ -> failure x
  Abs.LE _ -> failure x
  Abs.GTH _ -> failure x
  Abs.GE _ -> failure x
  Abs.EQU _ -> failure x
  Abs.NE _ -> failure x
