-- programs ------------------------------------------------

entrypoints Prog ;

Program.        Prog ::= [TopDef] ;

TopDefPredeal.  TopDef ::= "predeal" "=" "{" [HandPredeal] "}" ;

Final.          TopDef ::= "final" "=" Expr ;

TopDefShape.    TopDef ::= ShapeDef ;

TopDefEval.     TopDef ::= Ident "=" "evaluator" "(" [EvalVal] ")" ;

separator       TopDef ";" ;

separator       HandPredeal "," ;

-- Predeal -------------------------------------------------

HandPredeal.    HandPredeal ::= Hand ":" HandFeature ;

HandLit.        HandFeature ::= String ;

SmartStackShape.     HandFeature ::= "(" Ident ")" ;

SmartStackFull.      HandFeature ::= "(" Ident "," Ident "," Value ")" ;

ValueRange.     Value ::= "(" Integer "," Integer ")" ;

-- Shapes --------------------------------------------------

ShapeCond.      ShapeDef ::= Ident "=" "(" ShapeExpr ")" ;

ShapeLit.       ShapeDef ::= Ident "=" [Shape] ;

EvalVal.        EvalVal ::= Integer ;

separator       EvalVal "," ;

ShapeOk.        Shape ::= ShapeOk ;

ShapeNeg.       Shape ::= ShapeNeg ;

OneShapeOk.     ShapeOk ::= "[" [SuitCount] "]" ;

OneShapeNeg.    ShapeNeg ::= "!" ShapeOk ;

separator       Shape "+" ;

SuitIntCount.   SuitCount ::= SuitInt ;

SuitInt.        SuitInt ::= Integer ;

SuitChoice.     SuitCount ::= "(" [SuitInt] ")" ;

separator       SuitCount ";" ;

separator       SuitInt ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

-- Expressions ---------------------------------------------

HandAttr.  Expr6 ::= Hand"."Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

ENot.      Expr5 ::= "not" Expr6 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "and" Expr1 ;

EOr.       Expr ::= Expr1 "or" Expr ;

coercions  Expr 6 ;

HandN.     Hand ::= "N" ;

HandE.     Hand ::= "E" ;

HandW.     Hand ::= "W" ;

HandS.     Hand ::= "S" ;

-- Shape Expressions ---------------------------------------

ESuit.     ShapeExpr6 ::= SuitLit ;

EShapeInt. ShapeExpr6 ::= Integer ;

ENotShape.       ShapeExpr5 ::= "not" ShapeExpr6 ;

ERelShape.       ShapeExpr2 ::= ShapeExpr2 RelOp ShapeExpr3 ;

EAndShape.       ShapeExpr1 ::= ShapeExpr2 "and" ShapeExpr1 ;

EOrShape.        ShapeExpr ::= ShapeExpr1 "or" ShapeExpr ;

coercions  ShapeExpr 6 ;

SuitLitS.  SuitLit ::= "s" ;

SuitLitH.  SuitLit ::= "h" ;

SuitLitD.  SuitLit ::= "d" ;

SuitLitC.  SuitLit ::= "c" ;

-- operators -----------------------------------------------

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
