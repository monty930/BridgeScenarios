-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from Bridgechai/Par.y
-----------------------------------------------------------------------------


rule 18 is unused
rule 19 is unused
rule 20 is unused
rule 21 is unused
rule 22 is unused
rule 23 is unused
rule 24 is unused
rule 25 is unused
rule 26 is unused
rule 27 is unused
rule 28 is unused
rule 29 is unused
rule 30 is unused
rule 31 is unused
rule 32 is unused
rule 33 is unused
rule 34 is unused
rule 35 is unused
rule 36 is unused
rule 37 is unused
rule 38 is unused
rule 39 is unused
rule 40 is unused
rule 41 is unused
rule 61 is unused
rule 62 is unused
rule 63 is unused
rule 64 is unused
rule 65 is unused
rule 66 is unused
rule 67 is unused
rule 68 is unused
rule 69 is unused
rule 70 is unused
rule 71 is unused
rule 72 is unused
rule 73 is unused
rule 74 is unused
rule 75 is unused
rule 76 is unused
rule 77 is unused

terminal '!' is unused
terminal '+' is unused
terminal 'Evaluator' is unused
terminal '[' is unused
terminal ']' is unused
terminal 'c' is unused
terminal 'd' is unused
terminal 'h' is unused
terminal 'int' is unused
terminal 's' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProg -> Prog                               (0)
	Ident -> L_Ident                                   (1)
	Integer -> L_integ                                 (2)
	String -> L_quoted                                 (3)
	Prog -> ListTopDef                                 (4)
	TopDef -> 'predeal' '=' '{' ListHandPredeal '}'    (5)
	TopDef -> 'final' '=' Expr                         (6)
	ListTopDef ->                                      (7)
	ListTopDef -> TopDef                               (8)
	ListTopDef -> TopDef ';' ListTopDef                (9)
	ListHandPredeal ->                                 (10)
	ListHandPredeal -> HandPredeal                     (11)
	ListHandPredeal -> HandPredeal ',' ListHandPredeal   (12)
	HandPredeal -> Hand ':' HandFeature                (13)
	HandFeature -> String                              (14)
	HandFeature -> '(' Ident ')'                       (15)
	HandFeature -> '(' Ident ',' Ident ',' Value ')'   (16)
	Value -> '(' Integer ',' Integer ')'               (17)
	ShapeDef -> Ident '=' '(' ShapeExpr ')'            (18)
	ShapeDef -> Ident '=' ListShape                    (19)
	EvalDef -> Ident '=' 'Evaluator' '(' ListEvalVal ')'   (20)
	EvalVal -> Integer                                 (21)
	ListEvalVal ->                                     (22)
	ListEvalVal -> EvalVal                             (23)
	ListEvalVal -> EvalVal ',' ListEvalVal             (24)
	Shape -> ShapeOk                                   (25)
	Shape -> ShapeNeg                                  (26)
	ShapeOk -> '[' ListSuitCount ']'                   (27)
	ShapeNeg -> '!' ShapeOk                            (28)
	ListShape ->                                       (29)
	ListShape -> Shape                                 (30)
	ListShape -> Shape '+' ListShape                   (31)
	SuitCount -> SuitInt                               (32)
	SuitCount -> '(' ListSuitInt ')'                   (33)
	SuitInt -> Integer                                 (34)
	ListSuitCount ->                                   (35)
	ListSuitCount -> SuitCount                         (36)
	ListSuitCount -> SuitCount ';' ListSuitCount       (37)
	ListSuitInt ->                                     (38)
	ListSuitInt -> SuitInt                             (39)
	ListSuitInt -> SuitInt ';' ListSuitInt             (40)
	Type -> 'int'                                      (41)
	Expr6 -> Hand '.' Ident                            (42)
	Expr6 -> Integer                                   (43)
	Expr6 -> 'true'                                    (44)
	Expr6 -> 'false'                                   (45)
	Expr6 -> '(' Expr ')'                              (46)
	Expr5 -> 'not' Expr6                               (47)
	Expr5 -> Expr6                                     (48)
	Expr2 -> Expr2 RelOp Expr3                         (49)
	Expr2 -> Expr3                                     (50)
	Expr1 -> Expr2 'and' Expr1                         (51)
	Expr1 -> Expr2                                     (52)
	Expr -> Expr1 'or' Expr                            (53)
	Expr -> Expr1                                      (54)
	Expr3 -> Expr4                                     (55)
	Expr4 -> Expr5                                     (56)
	Hand -> 'N'                                        (57)
	Hand -> 'E'                                        (58)
	Hand -> 'W'                                        (59)
	Hand -> 'S'                                        (60)
	ShapeExpr6 -> SuitLit                              (61)
	ShapeExpr6 -> Integer                              (62)
	ShapeExpr6 -> '(' ShapeExpr ')'                    (63)
	ShapeExpr5 -> 'not' ShapeExpr6                     (64)
	ShapeExpr5 -> ShapeExpr6                           (65)
	ShapeExpr2 -> ShapeExpr2 RelOp ShapeExpr3          (66)
	ShapeExpr2 -> ShapeExpr3                           (67)
	ShapeExpr1 -> ShapeExpr2 'and' ShapeExpr1          (68)
	ShapeExpr1 -> ShapeExpr2                           (69)
	ShapeExpr -> ShapeExpr1 'or' ShapeExpr             (70)
	ShapeExpr -> ShapeExpr1                            (71)
	ShapeExpr3 -> ShapeExpr4                           (72)
	ShapeExpr4 -> ShapeExpr5                           (73)
	SuitLit -> 's'                                     (74)
	SuitLit -> 'h'                                     (75)
	SuitLit -> 'd'                                     (76)
	SuitLit -> 'c'                                     (77)
	RelOp -> '<'                                       (78)
	RelOp -> '<='                                      (79)
	RelOp -> '>'                                       (80)
	RelOp -> '>='                                      (81)
	RelOp -> '=='                                      (82)
	RelOp -> '!='                                      (83)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'('            { PT _ (TS _ 3) }
	')'            { PT _ (TS _ 4) }
	'+'            { PT _ (TS _ 5) }
	','            { PT _ (TS _ 6) }
	'.'            { PT _ (TS _ 7) }
	':'            { PT _ (TS _ 8) }
	';'            { PT _ (TS _ 9) }
	'<'            { PT _ (TS _ 10) }
	'<='           { PT _ (TS _ 11) }
	'='            { PT _ (TS _ 12) }
	'=='           { PT _ (TS _ 13) }
	'>'            { PT _ (TS _ 14) }
	'>='           { PT _ (TS _ 15) }
	'E'            { PT _ (TS _ 16) }
	'Evaluator'    { PT _ (TS _ 17) }
	'N'            { PT _ (TS _ 18) }
	'S'            { PT _ (TS _ 19) }
	'W'            { PT _ (TS _ 20) }
	'['            { PT _ (TS _ 21) }
	']'            { PT _ (TS _ 22) }
	'and'          { PT _ (TS _ 23) }
	'c'            { PT _ (TS _ 24) }
	'd'            { PT _ (TS _ 25) }
	'false'        { PT _ (TS _ 26) }
	'final'        { PT _ (TS _ 27) }
	'h'            { PT _ (TS _ 28) }
	'int'          { PT _ (TS _ 29) }
	'not'          { PT _ (TS _ 30) }
	'or'           { PT _ (TS _ 31) }
	'predeal'      { PT _ (TS _ 32) }
	's'            { PT _ (TS _ 33) }
	'true'         { PT _ (TS _ 34) }
	'{'            { PT _ (TS _ 35) }
	'}'            { PT _ (TS _ 36) }
	L_Ident        { PT _ (TV $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProg    rule  0
	Ident           rule  1
	Integer         rule  2
	String          rule  3
	Prog            rule  4
	TopDef          rules 5, 6
	ListTopDef      rules 7, 8, 9
	ListHandPredeal rules 10, 11, 12
	HandPredeal     rule  13
	HandFeature     rules 14, 15, 16
	Value           rule  17
	ShapeDef        rules 18, 19
	EvalDef         rule  20
	EvalVal         rule  21
	ListEvalVal     rules 22, 23, 24
	Shape           rules 25, 26
	ShapeOk         rule  27
	ShapeNeg        rule  28
	ListShape       rules 29, 30, 31
	SuitCount       rules 32, 33
	SuitInt         rule  34
	ListSuitCount   rules 35, 36, 37
	ListSuitInt     rules 38, 39, 40
	Type            rule  41
	Expr6           rules 42, 43, 44, 45, 46
	Expr5           rules 47, 48
	Expr2           rules 49, 50
	Expr1           rules 51, 52
	Expr            rules 53, 54
	Expr3           rule  55
	Expr4           rule  56
	Hand            rules 57, 58, 59, 60
	ShapeExpr6      rules 61, 62, 63
	ShapeExpr5      rules 64, 65
	ShapeExpr2      rules 66, 67
	ShapeExpr1      rules 68, 69
	ShapeExpr       rules 70, 71
	ShapeExpr3      rule  72
	ShapeExpr4      rule  73
	SuitLit         rules 74, 75, 76, 77
	RelOp           rules 78, 79, 80, 81, 82, 83

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'final'        shift, and enter state 6
	'predeal'      shift, and enter state 7
	%eof           reduce using rule 7

	Prog           goto state 3
	TopDef         goto state 4
	ListTopDef     goto state 5

State 1


	L_Ident        shift, and enter state 2


State 2

	Ident -> L_Ident .                                  (rule 1)

	'!='           reduce using rule 1
	')'            reduce using rule 1
	','            reduce using rule 1
	';'            reduce using rule 1
	'<'            reduce using rule 1
	'<='           reduce using rule 1
	'=='           reduce using rule 1
	'>'            reduce using rule 1
	'>='           reduce using rule 1
	'and'          reduce using rule 1
	'or'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_pProg -> Prog .                              (rule 0)

	%eof           accept


State 4

	ListTopDef -> TopDef .                              (rule 8)
	ListTopDef -> TopDef . ';' ListTopDef               (rule 9)

	';'            shift, and enter state 10
	%eof           reduce using rule 8


State 5

	Prog -> ListTopDef .                                (rule 4)

	%eof           reduce using rule 4


State 6

	TopDef -> 'final' . '=' Expr                        (rule 6)

	'='            shift, and enter state 9


State 7

	TopDef -> 'predeal' . '=' '{' ListHandPredeal '}'    (rule 5)

	'='            shift, and enter state 8


State 8

	TopDef -> 'predeal' '=' . '{' ListHandPredeal '}'    (rule 5)

	'{'            shift, and enter state 30


State 9

	TopDef -> 'final' '=' . Expr                        (rule 6)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'not'          shift, and enter state 27
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 13
	Expr5          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 17
	Expr3          goto state 18
	Expr4          goto state 19
	Hand           goto state 20

State 10

	ListTopDef -> TopDef ';' . ListTopDef               (rule 9)

	'final'        shift, and enter state 6
	'predeal'      shift, and enter state 7
	%eof           reduce using rule 7

	TopDef         goto state 4
	ListTopDef     goto state 11

State 11

	ListTopDef -> TopDef ';' ListTopDef .               (rule 9)

	%eof           reduce using rule 9


State 12

	Expr6 -> Integer .                                  (rule 43)

	'!='           reduce using rule 43
	')'            reduce using rule 43
	';'            reduce using rule 43
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'=='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'and'          reduce using rule 43
	'or'           reduce using rule 43
	%eof           reduce using rule 43


State 13

	Expr5 -> Expr6 .                                    (rule 48)

	'!='           reduce using rule 48
	')'            reduce using rule 48
	';'            reduce using rule 48
	'<'            reduce using rule 48
	'<='           reduce using rule 48
	'=='           reduce using rule 48
	'>'            reduce using rule 48
	'>='           reduce using rule 48
	'and'          reduce using rule 48
	'or'           reduce using rule 48
	%eof           reduce using rule 48


State 14

	Expr4 -> Expr5 .                                    (rule 56)

	'!='           reduce using rule 56
	')'            reduce using rule 56
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<='           reduce using rule 56
	'=='           reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'and'          reduce using rule 56
	'or'           reduce using rule 56
	%eof           reduce using rule 56


State 15

	Expr2 -> Expr2 . RelOp Expr3                        (rule 49)
	Expr1 -> Expr2 . 'and' Expr1                        (rule 51)
	Expr1 -> Expr2 .                                    (rule 52)

	'!='           shift, and enter state 39
	')'            reduce using rule 52
	';'            reduce using rule 52
	'<'            shift, and enter state 40
	'<='           shift, and enter state 41
	'=='           shift, and enter state 42
	'>'            shift, and enter state 43
	'>='           shift, and enter state 44
	'and'          shift, and enter state 45
	'or'           reduce using rule 52
	%eof           reduce using rule 52

	RelOp          goto state 38

State 16

	Expr -> Expr1 . 'or' Expr                           (rule 53)
	Expr -> Expr1 .                                     (rule 54)

	')'            reduce using rule 54
	';'            reduce using rule 54
	'or'           shift, and enter state 37
	%eof           reduce using rule 54


State 17

	TopDef -> 'final' '=' Expr .                        (rule 6)

	';'            reduce using rule 6
	%eof           reduce using rule 6


State 18

	Expr2 -> Expr3 .                                    (rule 50)

	'!='           reduce using rule 50
	')'            reduce using rule 50
	';'            reduce using rule 50
	'<'            reduce using rule 50
	'<='           reduce using rule 50
	'=='           reduce using rule 50
	'>'            reduce using rule 50
	'>='           reduce using rule 50
	'and'          reduce using rule 50
	'or'           reduce using rule 50
	%eof           reduce using rule 50


State 19

	Expr3 -> Expr4 .                                    (rule 55)

	'!='           reduce using rule 55
	')'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<='           reduce using rule 55
	'=='           reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'and'          reduce using rule 55
	'or'           reduce using rule 55
	%eof           reduce using rule 55


State 20

	Expr6 -> Hand . '.' Ident                           (rule 42)

	'.'            shift, and enter state 36


State 21

	Expr6 -> '(' . Expr ')'                             (rule 46)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'not'          shift, and enter state 27
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 13
	Expr5          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 35
	Expr3          goto state 18
	Expr4          goto state 19
	Hand           goto state 20

State 22

	Hand -> 'E' .                                       (rule 58)

	'.'            reduce using rule 58
	':'            reduce using rule 58


State 23

	Hand -> 'N' .                                       (rule 57)

	'.'            reduce using rule 57
	':'            reduce using rule 57


State 24

	Hand -> 'S' .                                       (rule 60)

	'.'            reduce using rule 60
	':'            reduce using rule 60


State 25

	Hand -> 'W' .                                       (rule 59)

	'.'            reduce using rule 59
	':'            reduce using rule 59


State 26

	Expr6 -> 'false' .                                  (rule 45)

	'!='           reduce using rule 45
	')'            reduce using rule 45
	';'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'=='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'and'          reduce using rule 45
	'or'           reduce using rule 45
	%eof           reduce using rule 45


State 27

	Expr5 -> 'not' . Expr6                              (rule 47)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 34
	Hand           goto state 20

State 28

	Expr6 -> 'true' .                                   (rule 44)

	'!='           reduce using rule 44
	')'            reduce using rule 44
	';'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'=='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'and'          reduce using rule 44
	'or'           reduce using rule 44
	%eof           reduce using rule 44


State 29

	Integer -> L_integ .                                (rule 2)

	'!='           reduce using rule 2
	')'            reduce using rule 2
	','            reduce using rule 2
	';'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'=='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'and'          reduce using rule 2
	'or'           reduce using rule 2
	%eof           reduce using rule 2


State 30

	TopDef -> 'predeal' '=' '{' . ListHandPredeal '}'    (rule 5)

	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'}'            reduce using rule 10

	ListHandPredealgoto state 31
	HandPredeal    goto state 32
	Hand           goto state 33

State 31

	TopDef -> 'predeal' '=' '{' ListHandPredeal . '}'    (rule 5)

	'}'            shift, and enter state 53


State 32

	ListHandPredeal -> HandPredeal .                    (rule 11)
	ListHandPredeal -> HandPredeal . ',' ListHandPredeal    (rule 12)

	','            shift, and enter state 52
	'}'            reduce using rule 11


State 33

	HandPredeal -> Hand . ':' HandFeature               (rule 13)

	':'            shift, and enter state 51


State 34

	Expr5 -> 'not' Expr6 .                              (rule 47)

	'!='           reduce using rule 47
	')'            reduce using rule 47
	';'            reduce using rule 47
	'<'            reduce using rule 47
	'<='           reduce using rule 47
	'=='           reduce using rule 47
	'>'            reduce using rule 47
	'>='           reduce using rule 47
	'and'          reduce using rule 47
	'or'           reduce using rule 47
	%eof           reduce using rule 47


State 35

	Expr6 -> '(' Expr . ')'                             (rule 46)

	')'            shift, and enter state 50


State 36

	Expr6 -> Hand '.' . Ident                           (rule 42)

	L_Ident        shift, and enter state 2

	Ident          goto state 49

State 37

	Expr -> Expr1 'or' . Expr                           (rule 53)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'not'          shift, and enter state 27
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 13
	Expr5          goto state 14
	Expr2          goto state 15
	Expr1          goto state 16
	Expr           goto state 48
	Expr3          goto state 18
	Expr4          goto state 19
	Hand           goto state 20

State 38

	Expr2 -> Expr2 RelOp . Expr3                        (rule 49)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'not'          shift, and enter state 27
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 13
	Expr5          goto state 14
	Expr3          goto state 47
	Expr4          goto state 19
	Hand           goto state 20

State 39

	RelOp -> '!=' .                                     (rule 83)

	'('            reduce using rule 83
	'E'            reduce using rule 83
	'N'            reduce using rule 83
	'S'            reduce using rule 83
	'W'            reduce using rule 83
	'false'        reduce using rule 83
	'not'          reduce using rule 83
	'true'         reduce using rule 83
	L_integ        reduce using rule 83


State 40

	RelOp -> '<' .                                      (rule 78)

	'('            reduce using rule 78
	'E'            reduce using rule 78
	'N'            reduce using rule 78
	'S'            reduce using rule 78
	'W'            reduce using rule 78
	'false'        reduce using rule 78
	'not'          reduce using rule 78
	'true'         reduce using rule 78
	L_integ        reduce using rule 78


State 41

	RelOp -> '<=' .                                     (rule 79)

	'('            reduce using rule 79
	'E'            reduce using rule 79
	'N'            reduce using rule 79
	'S'            reduce using rule 79
	'W'            reduce using rule 79
	'false'        reduce using rule 79
	'not'          reduce using rule 79
	'true'         reduce using rule 79
	L_integ        reduce using rule 79


State 42

	RelOp -> '==' .                                     (rule 82)

	'('            reduce using rule 82
	'E'            reduce using rule 82
	'N'            reduce using rule 82
	'S'            reduce using rule 82
	'W'            reduce using rule 82
	'false'        reduce using rule 82
	'not'          reduce using rule 82
	'true'         reduce using rule 82
	L_integ        reduce using rule 82


State 43

	RelOp -> '>' .                                      (rule 80)

	'('            reduce using rule 80
	'E'            reduce using rule 80
	'N'            reduce using rule 80
	'S'            reduce using rule 80
	'W'            reduce using rule 80
	'false'        reduce using rule 80
	'not'          reduce using rule 80
	'true'         reduce using rule 80
	L_integ        reduce using rule 80


State 44

	RelOp -> '>=' .                                     (rule 81)

	'('            reduce using rule 81
	'E'            reduce using rule 81
	'N'            reduce using rule 81
	'S'            reduce using rule 81
	'W'            reduce using rule 81
	'false'        reduce using rule 81
	'not'          reduce using rule 81
	'true'         reduce using rule 81
	L_integ        reduce using rule 81


State 45

	Expr1 -> Expr2 'and' . Expr1                        (rule 51)

	'('            shift, and enter state 21
	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'false'        shift, and enter state 26
	'not'          shift, and enter state 27
	'true'         shift, and enter state 28
	L_integ        shift, and enter state 29

	Integer        goto state 12
	Expr6          goto state 13
	Expr5          goto state 14
	Expr2          goto state 15
	Expr1          goto state 46
	Expr3          goto state 18
	Expr4          goto state 19
	Hand           goto state 20

State 46

	Expr1 -> Expr2 'and' Expr1 .                        (rule 51)

	')'            reduce using rule 51
	';'            reduce using rule 51
	'or'           reduce using rule 51
	%eof           reduce using rule 51


State 47

	Expr2 -> Expr2 RelOp Expr3 .                        (rule 49)

	'!='           reduce using rule 49
	')'            reduce using rule 49
	';'            reduce using rule 49
	'<'            reduce using rule 49
	'<='           reduce using rule 49
	'=='           reduce using rule 49
	'>'            reduce using rule 49
	'>='           reduce using rule 49
	'and'          reduce using rule 49
	'or'           reduce using rule 49
	%eof           reduce using rule 49


State 48

	Expr -> Expr1 'or' Expr .                           (rule 53)

	')'            reduce using rule 53
	';'            reduce using rule 53
	%eof           reduce using rule 53


State 49

	Expr6 -> Hand '.' Ident .                           (rule 42)

	'!='           reduce using rule 42
	')'            reduce using rule 42
	';'            reduce using rule 42
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'=='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'and'          reduce using rule 42
	'or'           reduce using rule 42
	%eof           reduce using rule 42


State 50

	Expr6 -> '(' Expr ')' .                             (rule 46)

	'!='           reduce using rule 46
	')'            reduce using rule 46
	';'            reduce using rule 46
	'<'            reduce using rule 46
	'<='           reduce using rule 46
	'=='           reduce using rule 46
	'>'            reduce using rule 46
	'>='           reduce using rule 46
	'and'          reduce using rule 46
	'or'           reduce using rule 46
	%eof           reduce using rule 46


State 51

	HandPredeal -> Hand ':' . HandFeature               (rule 13)

	'('            shift, and enter state 57
	L_quoted       shift, and enter state 58

	String         goto state 55
	HandFeature    goto state 56

State 52

	ListHandPredeal -> HandPredeal ',' . ListHandPredeal    (rule 12)

	'E'            shift, and enter state 22
	'N'            shift, and enter state 23
	'S'            shift, and enter state 24
	'W'            shift, and enter state 25
	'}'            reduce using rule 10

	ListHandPredealgoto state 54
	HandPredeal    goto state 32
	Hand           goto state 33

State 53

	TopDef -> 'predeal' '=' '{' ListHandPredeal '}' .    (rule 5)

	';'            reduce using rule 5
	%eof           reduce using rule 5


State 54

	ListHandPredeal -> HandPredeal ',' ListHandPredeal .    (rule 12)

	'}'            reduce using rule 12


State 55

	HandFeature -> String .                             (rule 14)

	','            reduce using rule 14
	'}'            reduce using rule 14


State 56

	HandPredeal -> Hand ':' HandFeature .               (rule 13)

	','            reduce using rule 13
	'}'            reduce using rule 13


State 57

	HandFeature -> '(' . Ident ')'                      (rule 15)
	HandFeature -> '(' . Ident ',' Ident ',' Value ')'    (rule 16)

	L_Ident        shift, and enter state 2

	Ident          goto state 59

State 58

	String -> L_quoted .                                (rule 3)

	','            reduce using rule 3
	'}'            reduce using rule 3


State 59

	HandFeature -> '(' Ident . ')'                      (rule 15)
	HandFeature -> '(' Ident . ',' Ident ',' Value ')'    (rule 16)

	')'            shift, and enter state 60
	','            shift, and enter state 61


State 60

	HandFeature -> '(' Ident ')' .                      (rule 15)

	','            reduce using rule 15
	'}'            reduce using rule 15


State 61

	HandFeature -> '(' Ident ',' . Ident ',' Value ')'    (rule 16)

	L_Ident        shift, and enter state 2

	Ident          goto state 62

State 62

	HandFeature -> '(' Ident ',' Ident . ',' Value ')'    (rule 16)

	','            shift, and enter state 63


State 63

	HandFeature -> '(' Ident ',' Ident ',' . Value ')'    (rule 16)

	'('            shift, and enter state 65

	Value          goto state 64

State 64

	HandFeature -> '(' Ident ',' Ident ',' Value . ')'    (rule 16)

	')'            shift, and enter state 67


State 65

	Value -> '(' . Integer ',' Integer ')'              (rule 17)

	L_integ        shift, and enter state 29

	Integer        goto state 66

State 66

	Value -> '(' Integer . ',' Integer ')'              (rule 17)

	','            shift, and enter state 68


State 67

	HandFeature -> '(' Ident ',' Ident ',' Value ')' .    (rule 16)

	','            reduce using rule 16
	'}'            reduce using rule 16


State 68

	Value -> '(' Integer ',' . Integer ')'              (rule 17)

	L_integ        shift, and enter state 29

	Integer        goto state 69

State 69

	Value -> '(' Integer ',' Integer . ')'              (rule 17)

	')'            shift, and enter state 70


State 70

	Value -> '(' Integer ',' Integer ')' .              (rule 17)

	')'            reduce using rule 17


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 84
Number of terminals: 39
Number of non-terminals: 41
Number of states: 71
